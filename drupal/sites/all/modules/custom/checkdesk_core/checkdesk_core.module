<?php

/**
 * Implements hook_init().
 */
function checkdesk_core_init() {
  drupal_add_library('system', 'ui.draggable');
  drupal_add_library('system', 'ui.droppable');
  drupal_add_library('system', 'drupal.ajax');

  drupal_add_js(drupal_get_path('module', 'checkdesk_core') . '/js/checkdesk_core.js');

  // HACK: This enables the #ajax submission of the node form. Currently
  //       there does not appear to be a clean way to do this.
  //       See similar: http://drupal.org/node/1167076
  module_load_include('inc', 'node', 'node.pages');
}

/**
 * Implements hook_permission().
 */
function checkdesk_core_permission() {
  return array(
    'access any drafts content' => array(
      'title' => t('Access any drafts content'),
      'description' => t('User can see drafts link for any content.'),
    ),
    'edit published content' => array(
      'title' => t('Edit published content'),
      'description' => t('User can edit published content.'),
    ),
    'access author filter' => array(
      'title' => t('Access author filter'),
      'description' => t('User can access author filter (search page).'),
    ),
    'show unflag text' => array(
      'title' => t('Show unflag text'),
      'description' => t('User will able to see unflag text'),
    ),
    'access additional settings' => array(
      'title' => t('Access additional settings'),
      'description' => t('User can access additional settings'),
    ),
    'access administer role' => array(
      'title' => t('Access administer role'),
      'description' => t('User can access administer role'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function checkdesk_core_menu() {
  $items = array();

  $items['<sub>'] = array(
    'page callback' => 'drupal_goto',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['<nolink>'] = array(
    'page callback' => 'drupal_not_found',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['core/messages'] = array(
    'title' => 'Invoke message',
    'page callback' => '_checkdesk_core_invoke_messages',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/system/checkdesk'] = array(
    'title' => 'Checkdesk',
    'description' => 'Manage general Checkdesk configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_checkdesk_core_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'checkdesk.admin.inc',
    'file path' => drupal_get_path('module', 'checkdesk_core') . '/includes',
  );
  $items['modal/%ctools_js'] = array(
    'page callback' => 'checkdesk_core_modal_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );
  $items['checkdesk_validation/unique_field'] = array(
    'title' => 'Client-side validation ajax callback to validate unique fields',
    'page callback' => '_checkdesk_validation_ajax_unique_field',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/collaboration'] = array(
    'title' => 'Collaboration',
    'page callback' => '_checkdesk_story_collaboration',
    'page arguments' => array(1),
    'access callback' => '_checkdesk_access_content_type',
    'access arguments' => array('discussion', 1),
    'file' => 'checkdesk.collaborate.inc',
    'file path' => drupal_get_path('module', 'checkdesk_core') . '/includes',
    'type' => MENU_LOCAL_TASK
  );
  $items['checkdesk/%ctools_js/sign_in_up'] = array(
    'title' => 'Checkdesk',
    'page callback' => 'checkdesk_sign_in_up_callback',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'checkdesk.sign_in_up.inc',
    'file path' => drupal_get_path('module', 'checkdesk_core') . '/includes',
  );
  $items['checkdesk/stories'] = array(
    'title' => 'Stories',
    'page callback' => '_checkdesk_goto_search',
    'page arguments' => array('stories'),
    'access arguments' => array('access content'),
  );
  $items['checkdesk/my_drafts'] = array(
    'title' => 'My drafts',
    'page callback' => '_checkdesk_goto_search',
    'page arguments' => array('my_drafts'),
    'access arguments' => array('view own unpublished content'),
  );
  $items['checkdesk/my_stories'] = array(
    'title' => 'My stories',
    'page callback' => '_checkdesk_goto_search',
    'page arguments' => array('my_stories'),
    'access arguments' => array('access content'),
  );
  $items['checkdesk/settings'] = array(
    'title' => 'Settings',
    'page callback' => '_checkdesk_core_user_settings',
    'access callback' => 'user_is_logged_in',
  );
  $items['checkdesk/people'] = array(
    'title' => 'Manage users',
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/people'),
    'access arguments' => array('administer users'),
  );
  $items['checkdesk_resend_pass/%'] = array(
    'title' => 'Resend rest-password mail',
    'page callback' => '_checkdesk_resend_pass',
    'page arguments' => array(1),
    'access callback' => 'user_is_anonymous',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  // revision cancel local subtask.
  $items['node/%node/revisions/%vid/cancel'] = array(
    'title' => 'Cancel',
    'page callback' => '_checkdesk_revisions_cancel',
    'page arguments' => array(1, 3),
    'access callback' => TRUE,//'_revisioning_access_node_revision',
     //'access arguments' => array('revert revisions', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => -2,
  );
  $items['front-page'] = array(
    'title' => '',
    'page callback' => '_checkdesk_front_page',
    'access arguments' => array('access content'),
    'file' => 'checkdesk.frontpage.inc',
    'file path' => drupal_get_path('module', 'checkdesk_core') . '/includes',
  );
  return $items;
}

function _checkdesk_goto_search($preset) {
  global $user;
  $query = array('type' => 'All');
  switch ($preset) {
    case 'reports':
      $query['type'] = 'report';
      break;
    case 'stories':
      $query['type'] = 'story';
      break;
    case 'my_drafts':
      $query['status'] = 'All';
      $query['state'] = 2;
      $query['author'] = $user->name;
      break;
    case 'my_stories':
      $query['type'] = 'story';
      $query['author'] = $user->name;
      break;
  }
  drupal_goto('search', array('query' => $query));
}

function _checkdesk_core_user_settings() {
  global $user;
  drupal_goto('user/' . $user->uid . '/edit');
}

/**
 * Resend reset password mail.
 * @param $uid
 */
function _checkdesk_resend_pass($uid) {
  $account = user_load($uid);
  _user_mail_notify('password_reset', $account);
  $msg = theme('checkdesk_core_reset_pass', array(
    'resend' => NULL
  ));
  drupal_set_message($msg);
  drupal_goto('<front>');
}

/**
 * Implements hook_menu_alter().
 */
function checkdesk_core_menu_alter(&$items) {
  // add delete tab to all nodes
  $items['node/%node/delete']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
  // make nodequeue tab localizable
  $items['node/%node/nodequeue']['title callback'] = 'checkdesk_core_nodequeue_tab_title';

  // deny access to node page
  $items['node']['access callback'] = FALSE;
  // fix edit account
  $items['user/%user/edit/account'] = array(
    'title' => 'Account',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  // Change revision tab title
  $items['node/%node/revisions']['title callback'] = '_checkdesk_core_revisioning_title_for_tab';
  $items['node/%node/view']['title callback'] = '_checkdesk_core_revisioning_title_for_tab';
  $items['node/%node/edit']['title callback'] = '_checkdesk_core_revisioning_title_for_tab';
  $items['node/%node/revisions/%vid/revert']['title callback'] = '_checkdesk_core_revisioning_title_for_revert';
  unset($items['node/%node/revisions/list']);
  unset($items['node/%node/revisions/%vid/edit']);
  $items['node/%node/edit']['access callback'] = 'node_access';
  $items['node/%node/edit']['access arguments'] = array('update', 1);
}

/**
 * Title callback for menu item `node/%node/nodequeue`.
 */
function checkdesk_core_nodequeue_tab_title() {
  return t(variable_get('nodequeue_tab_name', 'Nodequeue'));
}

/**
 * Get title for tab.
 */
function _checkdesk_core_revisioning_title_for_tab($node, $tab) {
  if ($tab == 'revisions') {
    return t('Revision history');
  }
  return ($tab == 'edit' ? t('Edit') : t('View'));
}

/**
 * Get title for tab.
 */
function _checkdesk_core_revisioning_title_for_revert() {
  return t('Restore this version');
}

function _checkdesk_revisions_cancel($node, $vid) {
    drupal_goto('node/' . $node->nid);
}

/**
 * Menu function for `modal/%ctools_js`.
 */
function checkdesk_core_modal_callback($js = FALSE) {
  $alias = preg_replace('/([a-z]{2}\/)?modal\/[^\/]+\//', '', request_path());
  $path = drupal_lookup_path('source', $alias);
  $node = menu_get_object('node', 1, $path);
  if (empty($node)) {
    return MENU_NOT_FOUND;
  }
  $output = drupal_render(node_view($node));
  $title = $node->title;
  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');
    // custom settings array for bookmarlet modal
    $modal_style = array(
      'modal-popup-bookmarklet' => array(
        'modalSize' => array(
          'type' => 'fixed',
          'width' => 700,
          'height' => 350,
          'addWidth' => 0,
          'addHeight' => 0
        ),
        'modalOptions' => array(
          'opacity' => .5,
          'background-color' => '#000',
        ),
        'animation' => 'show',
        'animationSpeed' => 40,
        'modalTheme' => 'CToolsModalDialog',
        'throbber' => theme('image', array('path' => ctools_image_path('ajax-loader.gif', 'checkdesk_core'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
      ),
    );

    drupal_add_js($modal_style, 'setting');
    ctools_modal_render($title, $output);

  }
  else {
    drupal_set_title($title);
    return $output;
  }
}

/**
 * Implements hook_ajax_render_alter().
 * Add a `facebook_refresh` command to make sure FB embeds are shown correctly.
 * @see http://thereisamoduleforthat.com/content/loading-facebook-embeds-ajax
 */
function checkdesk_core_ajax_render_alter(&$commands) {
  foreach ($commands as $key => $command) {
    if ($command['command'] === 'modal_display') {
      $commands[] = array(
        'command' => 'refreshFacebook',
      );
    }
    // If we're dismissing a modal, AND we're reloading the page, don't dismiss the modal.
    if ($command['command'] === 'modal_dismiss' && array_filter($commands, function($v) { return $v['command'] === 'reload'; })) {
      unset($commands[$key]);
    }
  }
}

/**
 * Access function to a certain content type.
 */
function _checkdesk_access_content_type($type, $node) {
  return $node->type === $type && node_access('view', $node);
}

/**
 * Implements hook_flag_link_type_info().
 */
function checkdesk_core_flag_link_type_info() {
  return array(
    'checkdesk_modal' => array(
      'title' => t('Open confirmation in modal'),
      'description' => t('The user will be shown a modal window to confirm the flag.'),
      'options' => array(
        'confirm_modal_style' => 'modal-popup-small',
        'flag_confirmation' => '',
        'unflag_confirmation' => '',
      ),
      'uses standard js' => FALSE,
      'uses standard css' => FALSE,
    ),
  );
}

/*
 * Implements hook_flag_link().
 */
function checkdesk_core_flag_link($flag, $action, $content_id) {
  return array(
    'href' => 'node/flag/confirm/' . "$action/$flag->name/$content_id" . '/nojs',
    'query' => drupal_get_destination(),
    'attributes' => array('class' => array('ctools-use-modal')),
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for `flag_form`.
 */
function checkdesk_core_form_flag_form_alter(&$form, &$form_state, $form_id) {
  $flag = $form['#flag'];
  $form['display']['link_options_checkdesk_modal'] = array(
    '#type' => 'fieldset',
    '#title' => t('Options for the "Confirmation form" link type'),
    // Any "link type" provider module must put its settings fields inside
    // a fieldset whose HTML ID is link-options-LINKTYPE, where LINKTYPE is
    // the machine-name of the link type. This is necessary for the
    // radiobutton's JavaScript dependency feature to work.
    '#id' => 'link-options-checkdesk_modal',
    '#weight' => 22,
  );

  $form['display']['link_options_checkdesk_modal']['confirm_modal_style'] = array(
    '#type' => 'radios',
    '#title' => t('Confirmation modal window sytle'),
    '#default_value' => isset($flag->confirm_modal_style) ? $flag->confirm_modal_style : 'modal-popup-small',
    '#options' => array(
      'modal-popup-small' => t('Small popup'),
      'modal-popup-medium' => t('Medium popup'),
      'modal-popup-large' => t('Large popup'),
    ),
  );
  $form['display']['link_options_checkdesk_modal']['flag_confirmation'] = array(
    '#type' => 'textfield',
    '#title' => t('Flag confirmation message'),
    '#default_value' => isset($flag->flag_confirmation) ? $flag->flag_confirmation : '',
    '#description' => t('Message displayed if the user has clicked the "flag this" link and confirmation is required. Usually presented in the form of a question such as, "Are you sure you want to flag this content?"'),
    '#access' => empty($flag->locked['flag_confirmation']),
  );

  $form['display']['link_options_checkdesk_modal']['unflag_confirmation'] = array(
    '#type' => 'textfield',
    '#title' => t('Unflag confirmation message'),
    '#default_value' => isset($flag->unflag_confirmation) ? $flag->unflag_confirmation : '',
    '#description' => t('Message displayed if the user has clicked the "unflag this" link and confirmation is required. Usually presented in the form of a question such as, "Are you sure you want to unflag this content?"'),
    '#access' => empty($flag->locked['unflag_confirmation']),
  );

}

function checkdesk_core_preprocess_flag(&$variables) {
  if ($variables['flag']->link_type == 'checkdesk_modal' && $variables['link_href']) {
    ctools_include('modal');
    ctools_include('ajax');
    ctools_modal_add_js();

    $flag_css_name = 'flag-' . str_replace('_', '-', $variables['flag']->name);
    if (empty($variables['flag_classes'])) {
      $variables['flag_classes'] = '';
    }
    $variables['flag_classes'] .= ' ctools-modal-' . $variables['flag']->confirm_modal_style;
    $variables['flag_classes'] .= ' '. $flag_css_name;

    $path = str_replace("/checkdesk/drupal/", "", $variables['link']['href']);
    $variables['modal_link'] = ctools_modal_text_button($variables['link_text'], $path, $variables['link_title'], $variables['flag_classes']);
  }
}



/**
 * Ajax callback for invoking messages
 */
function _checkdesk_core_invoke_messages($action, $type) {

  if ($type != 'ajax') {
    // This is js only.
    return 'Oh well';
  }

  $commands = array();
  $commands[] = ajax_command_prepend('#messages-container', theme('status_messages'));
  $page = array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($page);
}

/**
 * Retrieve action links on given node.
 */
function _checkdesk_core_node_links($node, $account = NULL) {
  global $language, $base_root, $base_path;
  if (!$account) {
    global $user;
    $account = $user;
  }
  $links = array();
  if ($node->type == 'post') {
    $parent_story_id = $node->field_desk[LANGUAGE_NONE][0]['target_id'];
    $update_anchor = 'update-' . $node->nid;
    $url = url('node/'.$parent_story_id, array(
      'absolute' => TRUE, 'fragment' => $update_anchor, 'language' => $language,
      'query' => array('fbrefresh' => $node->changed),
    ));
    // Replace anchor # with %23 to force anchor on share link
    $url = str_replace('#' . $update_anchor, '%23' . $update_anchor, $url);
  }
  else {
    $url = url('node/' . $node->nid, array(
      'absolute' => TRUE, 'language' => $language, 'query' => array('fbrefresh' => $node->changed),
    ));
  }

  // Try to gracefully redirect the user back to where they were. In some cases
  // this is not a simple task. Ajax based UI is especially difficult.
  $destination = $_GET['q'];

  // When launched from a modal on the reports page, attempt to go back to reports
  // and relaunch the modal.
  if (arg(0) == 'report-view-modal') {
    $destination = 'reports#report-' . arg(2);
  }
  // If the current page smells like AJAX, redirect somewhere safe.
  if (strstr($destination, 'ajax')) {
    $destination = 'reports';
  }
  if (arg(0) == 'reactor') {
    $destination = $_GET['destination'];
  }

  // Links for reports only.
  if (in_array($node->type, array('media', 'source'))) {

    $links['checkdesk-ellipsis'] = array(
      'title' => '',
      'href' => '',
      'fragment' => ' ',
      'attributes' => array('class' => 'dropdown-toggle', 'data-toggle' => 'dropdown'),
      'html' => TRUE,
      'cd_group' => 'checkdesk-ellipsis',
      'external' => TRUE,
    );

    if ($node->type == 'media') {
      // Check if this report is flagged
      $flags = flag_get_flags('node');
      $flagged = FALSE;
      foreach ($flags as $flag) {
        if ($flag->is_flagged($node->nid)) {
          $flagged = TRUE;
        }
      }
      $links['checkdesk-flag'] = array(
        'title' => '',
        'href' => '',
        'fragment' => ' ',
        'attributes' => array(
          'class' => 'dropdown-toggle ' . ($flagged ? 'flagged' : 'unflagged'),
          'data-toggle' => 'dropdown'
        ),
        'html' => TRUE,
        'cd_group' => 'checkdesk-flag',
        'external' => TRUE,
      );
      if (_checkdesk_reports_can_suggest($node)) {
        $links['checkdesk-suggest'] = array(
          'cd_group' => 'checkdesk-ellipsis',
          'link_type' => 'modal',
          'modal_class' => 'ctools-modal-modal-popup-medium',
          'title' => user_access('add report to story') ? t('Add to Story') : t('Suggest to Story'),
          'href' => 'node/' . $node->nid . '/checkdesk/modal/suggest/nojs',
          'query' => array(
            'destination' => $destination,
          ),
        );
      }
      // View original content
      if (isset($node->embed) && isset($node->embed->original_url)) {
        $links['checkdesk-view-original'] = array(
          'title' => t('View original'),
          'href' => $node->embed->original_url,
        );
      }

    }
  }

  // Reports or stories can be shared, edited or deleted
  if (in_array($node->type, array('discussion', 'media', 'post', 'source'))) {
    if (node_access('update', $node) && $node->type != 'post') {
      $links['checkdesk-edit'] = array(
        'cd_group' => 'checkdesk-ellipsis',
        'link_type' => 'link',
        'title' => t('Edit'),
        'href' => 'node/' . $node->nid . '/edit',
        'query' => array(
          'destination' => $destination,
        ),
      );
    }
    if (node_access('delete', $node) && $node->type != 'post') {
      // After deleting the report, redirect to current page or previous page, if the current page is the report to be removed
      $destination = current_path();
      if (($destination == 'node/' . $node->nid) || (arg(0) == 'report-view-modal' && arg(2) == $node->nid)) {
        if (isset($_SERVER['HTTP_REFERER'])) {
          $purl = parse_url($_SERVER['HTTP_REFERER']);
          if (@$purl['scheme'] . '://' . @$purl['host'] == $base_root) {
            $langcode = '';
            $alias = preg_replace('/^' . preg_quote($base_path, '/') . '/', '', $purl['path']);
            if (variable_get('locale_language_negotiation_url_part', LOCALE_LANGUAGE_NEGOTIATION_URL_PREFIX) == LOCALE_LANGUAGE_NEGOTIATION_URL_PREFIX) {
              $alias_list = explode('/', $alias, 2);
              if (count($alias_list) == 2) {
                list($langcode, $alias) = $alias_list;
              }
              if (!in_array($langcode, array_keys(language_list()))) {
                $alias = $langcode . '/' . $alias;
              }
            }
            $destination = drupal_lookup_path('source', urldecode($alias), $langcode);
            if (empty($destination)) {
              $destination = $alias;
            }
          }
          else {
            $destination = '<front>';
          }
        }
        else {
          $destination = '<front>';
        }
      }
      $links['checkdesk-delete'] = array(
        'cd_group' => 'checkdesk-ellipsis',
        'link_type' => 'link',
        'title' => t('Delete'),
        'href' => 'node/' . $node->nid . '/delete',
        'query' => array(
          'destination' => $destination,
        ),
      );
    }

    // set direction of the dropdown
    $layout = checkdesk_core_direction_settings();
    // Set direction for Updates
    if ($node->type == 'post') {
      $links['dropdown-direction'] = $layout['alpha'];
    }
    // unset direction for story/discussion
    elseif ($node->type == 'discussion') {
      $links['dropdown-direction'] = '';
    }
    else {
      $links['dropdown-direction'] = $layout['omega'];
    }

    $embed_data = array();
    if (in_array($node->type, array('media', 'source'))) {
      $embed_title = 'Embed this ';
      $embed_title .= ($node->type == 'media') ? 'report' : 'source';
      $embed_data = array('nid' => $node->nid, 'title' => $embed_title);
    }

    $share_links = checkdesk_core_share_links($url, $node->title, $node->type, $embed_data);
    foreach ($share_links as $id => $link) {
      $links[$id] = $link;
    }

    // Export option
    if ($node->type == 'discussion' && user_access('export reports')) {
      $links['checkdesk-export'] = array(
        'title' => t('Export to CSV'),
        'href' => 'reports-export/' . $node->nid,
        'attributes' => array('title' => $node->title, 'class' => array('export')),
        'link_type' => 'link',
        'cd_group' => 'checkdesk-share',
      );
    }

  }
  return $links;
}

/**
 * Returns an array containing share links for a node
 */
function checkdesk_core_share_links($url, $title, $type, $embed = array()) {
  $links = array();
  // parent share link with title
  $links['checkdesk-share'] = array(
    'title' => ($type == 'media') ? '' : '<span class="label">' . t('Share') . '</span>',
    'href' => '',
    'fragment'=> ' ',
    'attributes' => array('title' => $title, 'class' => 'dropdown-toggle', 'data-toggle' => 'dropdown'),
    'html' => TRUE,
    'cd_group' => 'checkdesk-share',
    'external' => TRUE,
  );
  $links['checkdesk-share-facebook'] = array(
    'title' => t('Share on Facebook'),
    'href' => $url,
    'attributes' => array('title' => $title, 'class' => array('facebook')),
    'link_type' => 'link',
    'cd_group' => 'checkdesk-share',
  );
  $links['checkdesk-share-twitter'] = array(
    'title' => t('Share on Twitter'),
    'href' => $url,
    'attributes' => array('title' => $title, 'class' => array('twitter')),
    'link_type' => 'link',
    'cd_group' => 'checkdesk-share',
  );
  $links['checkdesk-share-google'] = array(
    'title' => t('Share on Google+'),
    'href' => $url,
    'attributes' => array('title' => $title, 'class' => array('google')),
    'link_type' => 'link',
    'cd_group' => 'checkdesk-share',
  );

  // show embed if nid has a value
  if (isset($embed['nid'])) {
    if (!isset($embed['title'])) {
      $embed['title'] = 'Embed this report';
    }
    $links['checkdesk-share-embed'] = array(
      'html' => TRUE,
      'title' => t($embed['title']) . '<br><textarea class="embed-code" onclick="this.select();" readonly>' . check_plain(checkdesk_oembed_embed_pender_code($embed['nid'])) . '</textarea>',
      'href' => $url,
      'attributes' => array('title' => $title, 'class' => array('embed'), 'onclick' => 'return false;'),
      'link_type' => 'link',
      'cd_group' => 'checkdesk-share',
    );
  }

  return $links;
}

/**
 * Implements hook_flag_access().
 */
function checkdesk_core_flag_access($flag, $entity_id, $action, $account) {
  // Prevent "flag as graphic" from appearing if report already flagged as graphic by journalist.
  if ($flag->name == 'graphic') {
    $flag_journalist = flag_get_flag('graphic_journalist');
    if ($flag_journalist->is_flagged($entity_id)) {
      return FALSE;
    }
  }
  global $user;
  //do not allow unflag not allowed text to appear to citizen journalist.
  if (!user_access('show unflag text') && $flag->name == 'factcheck_journalist') {
    $flag_factcheck = flag_get_flag('factcheck_journalist');
    if ($flag_factcheck->is_flagged($entity_id)) {
      return FALSE;
    }
  }
}

/**
 * Implements hook_node_view().
 */
function checkdesk_core_node_view($node, $view_mode, $langcode) {
  // Do nothing if view mode is search index
  // as we only need to index title & body
  // check search index display settings
  if ($view_mode == 'search_index') {
    if ($node->type == 'post') {
      if (isset($node->body[LANGUAGE_NONE][0]['value'])) {
        $node->content['body'] = preg_replace('/\[[^:]+:([0-9]+)\]/u', NULL, $node->body[LANGUAGE_NONE][0]['value']);
      }
    }
    return;
  }

  if ($view_mode == 'checkdesk_search') {
    if (!empty($_GET['keys']) && isset($node->body[LANGUAGE_NONE][0]['value'])) {
      $node->content['body'] = search_excerpt($_GET['keys'], $node->body[LANGUAGE_NONE][0]['value']);
    }
    if ($node->type == 'discussion') {
      $updates = db_query('
          SELECT COUNT(entity_id) FROM {field_data_field_desk} WHERE field_desk_target_id = :nid
      ', array(':nid' => $node->nid))->fetchField();
      $node->content['story_updates_count'] = $updates ? format_plural($updates, '1 update', '@count updates') : NULL;
      // collaborators count
      $collaborators = db_query('
          SELECT COUNT(DISTINCT ha.uid)
          FROM {heartbeat_activity} ha
          WHERE nid_target = :nid AND message_id != :message_id
      ', array(':nid' => $node->nid, ':message_id' => 'checkdesk_follow_story'))->fetchField();
      $node->content['story_collaborators_count'] = $collaborators ? format_plural($collaborators, '1 collaborator', '@count collaborators') : NULL;
    }
  }

  if ($view_mode == 'checkdesk_collaborate' || $view_mode == 'checkdesk_search') {
    if ($node->type == 'post') {
      if (isset($node->body[LANGUAGE_NONE][0]['value'])) {
        $node->content['body'] = preg_replace('/\[[^:]+:([0-9]+)\]/u', NULL, $node->body[LANGUAGE_NONE][0]['value']);
        //collect reports
        $reports = $matches = array();
        preg_match_all('/\[[^:]+:([0-9]+)\]/u', $node->body[LANGUAGE_NONE][0]['value'], $matches);
        if (count($matches[1])) {
          foreach ($matches[1] as $key => $nid) {
            $entity = node_load($nid);
            if (is_object($entity)) {
              $reports[] = $entity;
            }
          }
        }
        if (count($reports)) {
          $node->content['update_reports'] = array(
            '#theme' => 'checkdesk_core_update_reports',
            '#reports' => $reports,
          );
          $node->content['update_reports_count'] = format_plural(count($reports), '1 report', '@count reports');
        }
      }
    }
  }

  // Get node links.
  $links = _checkdesk_core_node_links($node);

  // Add a drag and drop icon
  if ($node->type == 'media' && $view_mode == 'checkdesk_search' && arg(0) !== 'search') {
    if (!(($node_page = menu_get_object()) && $node_page->type == 'source')) {
      // Check that reports are in incoming sidebar view
      $links['cd_drag'] = '<span class="drag-drop"><div class="cd-drag-report cd-drag-node-'. $node->nid  .' draggable"><span class="icon-plus"></span></div></span>';
    }
  }

  if (!empty($links)) {
    $node->content['links']['checkdesk'] = array(
      '#theme' => 'links',
      '#links' => $links,
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }

  // Add decorations to story nodes.
  if ($node->type == 'discussion') {
    $node->content['story_blogger'] = array(
      '#theme' => 'checkdesk_core_story_blogger',
      '#story' => $node,
    );
    $node->content['story_status'] = array(
      '#theme' => 'checkdesk_core_story_status',
      '#story' => $node,
    );
    $node->content['story_drafts'] = array(
      '#theme' => 'checkdesk_core_story_drafts',
      '#story' => $node,
    );
  }
}

/**
 * Implements hook_node_view_alter().
 */
function checkdesk_core_node_view_alter(&$build) {
    // Check draft listing page
    if ($build['#node']->status && $build ['#view_mode'] == 'checkdesk_search' && isset($_GET['state']) && $_GET['state'] == 2) {
        $latest_vid = revisioning_get_latest_revision_id($build['#node']->nid);
        if ($latest_vid) {
            $build['#node'] = node_load($build['#node']->nid, $latest_vid);
            node_build_content($build['#node'], $build ['#view_mode']);
            $build['field_section'] = $build['#node']->content['field_section'];
            $build['field_tags'] = $build['#node']->content['field_tags'];
        }
    }
}

/*
 * Implements hook_contextual_links_view_alter().
 */
function checkdesk_core_contextual_links_view_alter(&$element, $items) {
  if (!isset($element['#element']['#node']->nid)) return;
  $links = _checkdesk_core_node_links($element['#element']['#node']);
  if (!empty($links)) {
    $element['#links'] += $links;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for `post_node_form`.
 */
function checkdesk_core_form_post_node_form_alter(&$form, &$form_state) {
  global $user;

  // Adjust compose update form
  $form['title']['#title'] = t('Update headline');
  $form['body'][LANGUAGE_NONE][0]['#title'] = t('Text');
  $form['body'][LANGUAGE_NONE][0]['#attributes']['placeholder'] = t('Write text and drag reports here to compose the update');

  // Make the body field a drop target for reports.
  $form['body']['#prefix'] = '<div class="droppable">';
  $form['body']['#suffix'] = '</div>';

  // Set language
  global $language;
  $form['language'] = array(
    '#type' => 'value',
    '#value' => $language->language,
  );

  // Set default parameters if any.
  if (isset($_GET['story'])) {
    // Hard-code desk reference to given desk.
    $form['field_desk'][LANGUAGE_NONE]['#default_value'] = $_GET['story'];
    $form['field_desk']['#access'] = false;
  }
  if (isset($_GET['report'])) {
    // Add given report to body.
    $node = node_load($_GET['report']);
    $form['body'][LANGUAGE_NONE][0]['#default_value'] = checkdesk_core_droppable_reference($node);
    $form['body'][LANGUAGE_NONE][0]['#format'] = 'liveblog';
  }
  $form['#validate'][] = '_checkdesk_core_post_node_form_validate';
  $form['actions']['submit']['#submit'][] = $form['actions']['draft']['#submit'][] = '_checkdesk_core_post_node_form_submit';

  if ($form['field_desk']['#access']) {
    $options = array('_none' => t('- Select a value -')) + _checkdesk_get_stories_by_activity();
    $form['field_desk'][LANGUAGE_NONE]['#options'] = $options;
    $form['field_desk'][LANGUAGE_NONE]['#attributes']['onchange'] = "_checkdesk_filter_reports(jQuery(this).val());";
    // Handle HTML entities
    foreach ($form['field_desk'][LANGUAGE_NONE]['#options'] as $key => $value) {
      $form['field_desk'][LANGUAGE_NONE]['#options'][$key] = htmlspecialchars_decode($value);
    }
  }

  $form['additional_settings']['#access'] = user_access('access additional settings');


  // Change title.
  drupal_set_title(t('Compose Update'));

  // Add CSS file for autocomplete field
  if($form['field_desk']) {
    _checkdesk_add_chosen_components();
  }

}

/**
 * Submit function for `post_node_form`.
 */
function _checkdesk_core_post_node_form_submit($form, &$form_state) {
  // Add wording for saving draft.
  if ($form_state['triggering_element']['#value'] == $form['actions']['draft']['#value']) {
    drupal_set_message(t('@type %title saved as draft.', array('@type' => t('Update'), '%title' => $form_state['values']['title'])));
  }
  $redirect_nid = $form_state['values']['field_desk'][LANGUAGE_NONE][0]['target_id'];
  $form_state['redirect'] = array('node/' . $redirect_nid, array('fragment' => 'update-'. $form_state['nid']));
}

/**
 * Validation function for `post_node_form`.
 */
function _checkdesk_core_post_node_form_validate($form, &$form_state) {
  // Prevent user from saving a new draft if another one exists already.
  if ($form_state['triggering_element']['#value'] == $form['actions']['draft']['#value']) {
    $desk_nid = $form_state['values']['field_desk'][LANGUAGE_NONE][0]['target_id'];
    global $user;
    $draft_nid = db_query("
  SELECT n.nid
  FROM {node} n INNER JOIN {field_data_field_desk} d ON n.nid = d.entity_id
  WHERE n.type = 'post'
  AND n.status = 0
  AND d.field_desk_target_id = :desk_nid
  AND n.uid = :uid
    ", array(':desk_nid' => $desk_nid, ':uid' => $user->uid))->fetchCol();
    if ($draft_nid) {
      form_set_error('field_desk',
        t('This story already has a draft that you created. You cannot save more than one draft for each story. You can <a href="@url">edit that draft now</a>.',
          array('@url' => url('node/' . $desk_nid))
        )
      );
    }
  }

}

/**
 * Implements hook_form_FORM_ID_alter() for `discussion_node_form`.
 *
 * Ajax-enable the discussion form as requested.
 */
function checkdesk_core_form_discussion_node_form_alter(&$form, &$form_state) {
  global $user;
  //Adjust create story form
  $form['title']['#title'] = t('Story title');
  $form['field_tags'][LANGUAGE_NONE]['#attributes']['placeholder'] = t('Add tags');
  $form['body'][LANGUAGE_NONE][0]['#title'] = t('Text');

  // Make the body field a drop target for reports.
  $form['body']['#prefix'] = '<div class="droppable">';
  $form['body']['#suffix'] = '</div>';
  // add custom class for image uploader plus hide description with class nodescription
  $form['field_lead_image']['#prefix'] = '<div class="custom_file_upload nodescription">';
  $form['field_lead_image']['#suffix'] = '</div">';
  $form['field_lead_image'][LANGUAGE_NONE][0]['#title'] = t('Add feature image');
  $form['field_lead_image']['#description'] = '';
  $form['actions']['submit']['#submit'][] = '_redirect_story';
  // language field
  $form['language']['#weight'] = 99;
  unset($form['language']['#options'][LANGUAGE_NONE]);
  if (!$form['nid']['#value']) {
    global $language;
    $form['actions']['submit']['#value'] = t('Create story');
    //Set default language value
    $form['language']['#default_value'] = $language->language;
  }
  if (user_access('edit published content')) {
      if (empty($form['#validate'])) {
        $form['#validate'] = array();
      }
      array_unshift($form['#validate'], '_checkdesk_new_revision_validate');
      $form['actions']['cd_revision'] = array(
      '#type' => 'submit',
      '#value' => t('Save as draft'),
      '#class' => 'form-submit',
      '#submit' => array('_checkdesk_new_revision_button_submit'),
      // Between the default Save and Preview buttons.
      '#weight' => 9,
    );
    if ($form['nid']['#value']) {
        $form['actions']['submit']['#value'] = $form['#node']->status ? t('Publish changes') : t('Publish');
    }
  }

  // Hide comment settings
  $form['comment_settings']['#access'] = user_access('access additional settings');

  // Add CSS file for autocomplete field
  if($form['field_tags']) {
    drupal_add_css(
      drupal_get_path('theme', 'checkdesk') . '/assets/css/replace_drupal/autocomplete.css',
      array(
        'scope' => 'footer',
        'group' => CSS_THEME,
        'weight' => '9999',
        'every_page' => FALSE,
      )
    );
    // add lib
    drupal_add_js(
      drupal_get_path('theme', 'checkdesk') . '/assets/js/libs/chosen.jquery.min.js',
      array(
        'scope' => 'footer',
        'group' => JS_THEME,
        'weight' => '9990',
        'every_page' => FALSE,
      )
    );
  }

  // Customize "Add more items" for authors.
  $form['field_additional_authors'][LANGUAGE_NONE]['add_more']['#value'] = t('Add author');
}

 /**
 * Submit handler for the save a new revision.
 *
 * Calls all submit handlers on the save button.
 */
function _checkdesk_new_revision_button_submit($form, &$form_state) {
  foreach ($form['actions']['submit']['#submit'] as $submit) {
    $submit($form, $form_state);
  }
}

/**
 * Handles save draft form validation
 */
function _checkdesk_new_revision_validate($form, &$form_state) {
  if ($form_state['triggering_element']['#value'] == $form['actions']['cd_revision']['#value']) {
      $form_state['values']['revision_operation'] = 2;
  }
  elseif ($form_state['values']['nid'] && !$form_state['values']['status']) {
      $form_state['values']['status'] = 1;
  }
}

/**
 * Redirect story to collaboration page.
 */
function _redirect_story($form, &$form_state) {
  $values = $form_state['values'];
  $form_state['redirect'] = 'node/' . $values['nid'] . '/collaboration';
}

/**
 * Implements hook_form_FORM_ID_alter() for `comment_node_discussion_form`.
 */
function checkdesk_core_form_comment_node_discussion_form_alter(&$form, &$form_state) {
  // Hide comment attachment field on comment form.
  $form['field_attachment']['#access'] = false;
}

/**
 * Implements hook_node_presave()
 */
function checkdesk_core_node_presave($node) {
  if ($node->type == 'discussion' && isset($node->field_additional_authors)) {
    //Eliminate duplicates in multiple authors section (Ticket #3763)
    $target_authors = array();
    foreach ($node->field_additional_authors[LANGUAGE_NONE] as $k => $row) {
      if (in_array($row['target_id'], $target_authors)) {
        unset($node->field_additional_authors[LANGUAGE_NONE][$k]);
      }
      $target_authors[] = $row['target_id'];
    }
  }
  // Set created timestamp to first published revision timestamp
  if ($node->status == NODE_PUBLISHED && isset($node->nid)) {
    $query = db_select('node_revision', 'r');
    $query->condition('nid', $node->nid);
    $query->condition('status', 1);
    $query->fields('r', array('nid'));
    $query->range(0, 1);
    $result = $query->execute();
    if ($result->rowCount() == 0) {
      $node->created = $node->changed;
    };
  }
}

/**
 * Implements hook_views_pre_render().
 */
function checkdesk_core_views_pre_render(&$view) {
  if ($view->name == 'checkdesk_search' && $view->current_display == 'incoming_reports') {
    // Setup drag & drop.
    drupal_add_js(libraries_get_path('insertatcaret') . '/jquery.insertatcaret.js');
    $data = array();
    foreach ($view->result as $row) {
      $node = (object) array(
        'nid'   => $row->nid,
        'title' => $row->node_title,
        'type'  => 'media',
      );
      $node->droppable_ref = checkdesk_core_droppable_reference($node);
      $data['node-' . $row->nid] = $node;
    }
    // Send view results to client.
    drupal_add_js(array('checkdesk' => array('reports' => $data)), 'setting');
  }
  elseif ($view->name == 'story_collaboration') {
    foreach ($view->result as $k => $v) {
      // Localize some variables
      $variables = heartbeat_decode_message_variables($v->heartbeat_activity_variables);
      foreach ($variables as $key => $value) {
        if (in_array($key, array('!flag_type', '!fact_checking_status', '!status'))) {
          $variables[$key] = t($value);
        }
      }
      $view->result[$k]->heartbeat_activity_variables = heartbeat_encode_message_variables($variables);
    }
  }
  elseif ($view->name == 'updates_for_stories') {
    if (in_array($view->current_display, array('block', 'page_1')) && isset($_REQUEST['autorefreshRequest'])) {
      // Update total rows so autorefresh can set correct update numbers 'update #'
      $nid = $_REQUEST['original_view_data']['view_args'];
      if ($nid) {
        $updates_count = db_query(' SELECT COUNT(*)
                  FROM {node} n
                  INNER JOIN {field_data_field_desk} fd ON n.nid = fd.entity_id
                  WHERE n.type = :type AND n.status = :status AND field_desk_target_id = :nid
                  ', array(':type' => 'post', ':status' => 1, ':nid' => $nid)
        )->fetchField();
        $view->total_rows = $updates_count;
      }
    }
  }
  elseif ($view->name == 'checkdesk_search') {
    if ($view->current_display == 'attachment_1') {
      if (!empty($view->exposed_raw_input['keys'])) {
        //Fix result count due to "group by" that generated by search module.
        $exists_type = array();
        foreach ($view->result as $k => &$row) {
          if (isset($exists_type[$row->node_type_1])) {
            $view->result[$exists_type[$row->node_type_1]]->node_type += 1;
            unset($view->result[$k]);
          }
          else {
            $row->node_type = 1;
            $exists_type[$row->node_type_1] = $k;
          }
        }
      }
      $types = array(
        'media' => array('s' => 'Report', 'p' => 'Reports'),
        'source' => array('s' => 'Source', 'p' => 'Sources'),
        'post' => array('s' => 'Update', 'p' => 'Updates'),
        'discussion' => array('s' => 'Story', 'p' => 'Stories'),
      );
      foreach ($view->result as $k => &$row) {
        $row->node_type_1 = ($row->node_type > 1) ? t($types[$row->node_type_1]['p']) : t($types[$row->node_type_1]['s']);
      }
    }
  }
  elseif ($view->name == 'more_stories' || $view->name == 'sections') {
    foreach ($view->result as $id => $tag) {
      $stories = views_get_view('recent_stories_by_tag');
      $stories->set_arguments(array($tag->tid));
      $stories->get_total_rows = TRUE;
      $output = $stories->preview('block');
      $total_rows = $stories->total_rows;
      $stories->destroy();
      // show container only if results are 4 or more
      if ($total_rows && $view->name == 'sections') {
          $view->result[$id]->stories = $output;
      }
      elseif ($view->name == 'more_stories' && $total_rows > 3) {
        $view->result[$id]->stories = $output;
      }
      else {
        unset($view->result[$id]);
      }
    }
  }
  elseif ($view->name == 'frontpage_sections') {
      foreach ($view->result as $id => $section) {
          $latest_story = views_get_view('recent_stories_by_tag');
          $latest_story->display['default']->display_options['pager']['options']['items_per_page'] = 1;
          $latest_story->set_arguments(array($section->tid));
          $latest_story->get_total_rows = TRUE;
          $output = $latest_story->preview('block');
          $stories = $latest_story->result;
          $total_rows = $latest_story->total_rows;
          $latest_story->destroy();
          if ($total_rows) {
              $view->result[$id]->latest_story = $stories[0];
          }
          else {
              unset($view->result[$id]);
          }
      }
      $view->total_rows = count($view->result);
  }
}

/**
 * (Ab)use pathauto to create the drag and drop media reference.
 *
 * @param $node
 *  A node object, needs at least 'nid' and 'title' attributes.
 */
function checkdesk_core_droppable_reference($node) {
  module_load_include('inc', 'pathauto');
  $pathauto_pattern = '[node:title]';

  // Replace any tokens in the pattern. Uses callback option to clean replacements. No sanitization.
  $alias = token_replace($pathauto_pattern, array('node' => $node), array(
    'sanitize' => FALSE,
    'clear' => TRUE,
    'callback' => 'pathauto_clean_token_values',
    'language' => (object) array('language' => LANGUAGE_NONE),
    'pathauto' => TRUE,
  ));
  $alias = pathauto_clean_alias($alias);

  return '[' . $alias . ':' . $node->nid . ']';
}

/**
 * Implements hook_entity_property_info().
 */
function checkdesk_core_entity_property_info() {
  $info = array();
  $properties = &$info['node']['bundles']['post']['properties'];

  $properties['reports'] = array(
    'label' => t('Reports'),
    'type' => 'list<node>',
    'description' => t("List of reports in this post."),
    'getter callback' => 'checkdesk_core_entity_property_get_reports',
  );
  return $info;
}

/**
 * Getter function for `reports` property.
 */
function checkdesk_core_entity_property_get_reports($node, array $options, $name, $entity_type) {
  $reports = array();
  if (!isset($node->body[LANGUAGE_NONE][0])) return $reports;
  $text = $node->body[LANGUAGE_NONE][0]['value'];
  $matches = array();
  preg_match_all('/\[[^:]+:([0-9]+)\]/u', $text, $matches);
  if (count($matches[1])) {
    $output = array();
    foreach ($matches[1] as $key => $nid) {
      if (is_numeric($nid)) {
        $node = node_load($nid);
        if (is_object($node)) {
          $reports[] = $node;
        }
      }
    }
  }
  return $reports;
}

/**
 * Implements hook_form_FORM_ID_alter() for `views_exposed_form`.
 */
function checkdesk_core_form_views_exposed_form_alter(&$form, &$form_state) {

  if ($form['#id'] == 'views-exposed-form-checkdesk-search-page' || $form['#id'] == 'views-exposed-form-checkdesk-search-incoming-reports') {
    $filter_to_hide = array();
    // Add required js for fastLiveFilter plugin.
    drupal_add_js(drupal_get_path('module', 'checkdesk_core') . '/js/jquery-fastLiveFilter/jquery.fastLiveFilter.js');
    drupal_add_js(drupal_get_path('module', 'checkdesk_core') . '/js/checkdesk_search.js');
    // Tag filter
    $form['field_tags_tid']['#fastlivefilte_placeholder'] = t('Search for tag');
    $form['field_tags_tid']['#options']['All'] = '– ' . t('Any tag') . ' –';
    unset($form['field_tags_tid']['#description']);
    // Media filters.
    if ($form['#id'] == 'views-exposed-form-checkdesk-search-incoming-reports' || (isset($_GET['type']) && $_GET['type'] === 'report')) {
      // Change -Any- status label
      $form['field_rating_tid']['#options']['All'] = '– ' . t('Any status') . ' –';
      unset($form['field_rating_tid']['#description']);
      $form['media_flags'] = array(
          '#type' => 'select',
          '#title' => t('Flags'),
          '#options' => array(
              'All' => '– ' . t('Any flag') . ' –',
              'flagged_gc' => t('Graphic content'),
              'flagged_spam' => t('Spam'),
          ),
          '#theme' => 'select_as_links',
      );
      // Associated stories filter
      $stories = db_query_range(
          "SELECT nid, title FROM {node} WHERE type = :type AND status = 1", 0, 50,
          array(':type' => 'discussion')
      )->fetchAllKeyed();
      $form['report_story'] = array(
          '#type' => 'select',
          '#title' => t('Associated stories'),
          '#options' => array('All' => '– ' . t('Any story') . ' –', 'None' => '– ' . t('Unassigned') . ' –') + $stories,
          '#theme' => 'select_as_links',
          '#bef_enable_fastlivefilter' => 1,
          '#fastlivefilte_placeholder' => t('Search for story'),
      );
      // Add Publication status filter
      $form['report_publication'] = array(
        '#type' => 'select',
        '#title' => t('Publication status'),
        '#options' => array(
          'All' => '– ' . t('All') . ' –',
          'report_published' => t('Published'),
          'report_unpublished' => t('Unpublished'),
        ),
        '#theme' => 'select_as_links',
      );
    }
    // Add author filter for admin or journalist
    global $user;
    if ($user->uid) {
      $users = array();
      if (user_access('access author filter')) {
        $users = db_query('
              SELECT name FROM {users} WHERE status = :status AND uid != :uid ORDER BY name
        ', array(':status' => 1, ':uid' => $user->uid))->fetchAllKeyed(0, 0);
      }
      $users = array('All' => '– ' . t('Any author') . ' –', $user->name => '– ' . t('My content') . ' –') + $users;
      $form['author'] = array(
          '#type' => 'select',
          '#title' => t('Authors'),
          '#options' => $users,
          '#theme' => 'select_as_links',
          '#bef_enable_fastlivefilter' => 1,
          '#fastlivefilte_placeholder' => t('Search for author'),
      );
    }

    $form['keys']['#attributes']['placeholder'] = t('Search');

    // Hide sort and submit button
    $form['sort_bef_combine']['#type'] = 'hidden';
    $form['submit']['#attributes']['class'][] = 'js-hide';

    if ($form['#id'] == 'views-exposed-form-checkdesk-search-page') {
      // Add custom field for type
      $form['type'] = array(
          '#type' => 'select',
          '#title' => '',
          '#options' => array(
              'All' => t('Everything'),
              'report' => t('Reports'),
              'source' => t('Sources'),
              'story' => t('Stories'),
              'update' => t('Updates'),
          ),
          '#theme' => 'select_as_links',
      );

      // This value determines the position of the new element.
      $insert_index = 2;
      $element_to_insert = array();
      $element_to_insert['filter-type'] = array(
          'value' => 'type',
      );
      $form_info_top = array_slice($form['#info'], 0, $insert_index);
      $form_info_bottom = array_slice($form['#info'], $insert_index);
      $new_form_info = $form_info_top + $element_to_insert + $form_info_bottom;
      $form['#info'] = $new_form_info;


      // Hide/show media reports based on type filter.
      if (!isset($_GET['type']) || (isset($_GET['type']) && $_GET['type'] !== 'report')) {
        $filter_to_hide[] = 'field_rating_tid';
      }

      // Story filter for updates
      if (isset($_GET['type']) && $_GET['type'] === 'update') {
        $stories = db_query(
            "SELECT nid, title FROM {node} WHERE type = :type AND status = 1",
            array(':type' => 'discussion')
        )->fetchAllKeyed();
        $form['update_story'] = array(
            '#type' => 'select',
            '#title' => t('Associated stories'),
            '#options' => array('All' => '– ' . t('Any story') . ' –') + $stories,
            '#theme' => 'select_as_links',
            '#bef_enable_fastlivefilter' => 1,
            '#fastlivefilte_placeholder' => t('Search for story'),
        );

        // Hide tag filter for updates
        $filter_to_hide[] = 'field_tags_tid';
      }

      // Source filter
      if (isset($_GET['type']) && $_GET['type'] === 'source') {
        $form['field_source_status_tid']['#options']['All'] = '– ' . t('Any status') . ' –';
        unset($form['field_source_status_tid']['#description']);
      }
      else {
        // Hide status filter.
        $filter_to_hide[] = 'field_source_status_tid';
      }

      // Show provider filter for source and media only
      if (!(isset($_GET['type']) && in_array($_GET['type'], array('source', 'report')))) {
        $filter_to_hide[] = 'field_provider_value';
      }

      if (isset($_GET['type']) && $_GET['type'] === 'story') {
        $form['field_section_tid_i18n']['#fastlivefilte_placeholder'] = t('Search for section');
      }
      else {
        // Hide section filter
        $filter_to_hide[] = 'field_section_tid_i18n';
        // Hide language filter
        $filter_to_hide[] = 'language';
      }
    }

    foreach ($filter_to_hide as $h) {
      $form['#info']['filter-' . $h]['label'] = NULL;
      $form[$h]['#type'] = 'hidden';
      unset($form[$h]['#theme']);
    }
  }
}

/**
 * Implements hook_theme().
 */
function checkdesk_core_theme() {
  $themes = array();
  $base = array(
    'file' => 'theme.inc',
    'path' => drupal_get_path('module', 'checkdesk_core') . '/theme',
  );

  $themes['checkdesk_core_story_blogger'] = array(
    'template' => 'story_blogger',
    'variables' => array(
      'story' => NULL,
    ),
  ) + $base;

  $themes['checkdesk_core_story_status'] = array(
    'template' => 'story_status',
    'variables' => array(
      'story' => NULL,
    ),
  ) + $base;

  $themes['checkdesk_core_story_drafts'] = array(
    'template' => 'story_drafts',
    'variables' => array(
      'story' => NULL,
    ),
  ) + $base;

  $themes['checkdesk_core_render_links'] = array(
    'variables' => array(
      'options' => NULL,
    ),
  ) + $base;

  $themes['checkdesk_core_render_search_header'] = array(
      'template' => 'checkdesk_search_header',
      'variables' => array(
      'links' => NULL,
    ),
  ) + $base;

  $themes['checkdesk_core_main_navigation'] = array(
      'template' => 'checkdesk_main_navigation',
      'variables' => array(
      'first_group' => NULL,
      'second_group' => NULL,
      'third_group' => NULL,
    ),
  ) + $base;

  $themes['checkdesk_core_sign_in_up'] = array(
      'template' => 'checkdesk_sign_in_up',
      'variables' => array(
      'links' => NULL,
    ),
  ) + $base;

  $themes['checkdesk_core_reset_pass'] = array(
      'template' => 'checkdesk_reset_pass',
      'variables' => array(
        'resend' => NULL,
      ),
    ) + $base;

  $themes['checkdesk_core_most_popular_stories'] = array(
      'template' => 'checkdesk_most_popular_stories',
      'variables' => array(
        'stories' => NULL,
      ),
   ) + $base;
  return $themes;
}

/**
 * API function to find whether user is online or offline.
 */
function checkdesk_core_user_online($account = NULL) {
  if (!$account) {
    global $user;
    $account = $user;
  }
  $interval = REQUEST_TIME - variable_get('user_block_seconds_online', 900);
  $count = db_query("SELECT COUNT(DISTINCT s.uid) FROM {sessions} s WHERE s.timestamp >= :timestamp AND s.uid = :uid", array(':timestamp' => $interval, ':uid' => $account->uid))->fetchField();
  return $count > 0;
}

/**
 * API function to find whether a node is flagged for fact-checking.
 */
function checkdesk_core_fact_checking($node) {
  $flag_name = 'factcheck';
  $flag = flag_get_flag($flag_name);
  if (!$flag) {
    watchdog('checkdesk', 'Flag "@flag" not found for fact-checking.', array('@flag' => $flag_name), WATCHDOG_ERROR);
    return FALSE;
  }
  return $flag->is_flagged($node->nid);
}

/**
 * API function to return number of drafted updates of a story.
 */
function checkdesk_core_story_updates_count($node, $drafted_only = FALSE) {
  $status = $drafted_only ? 0 : 1;
  $count = db_query("SELECT COUNT(*) FROM {node} n INNER JOIN {field_data_field_desk} f ON f.entity_id = n.nid WHERE n.type = 'post' AND n.status = :status AND f.bundle = 'post' AND field_desk_target_id = :target_nid", array(':status' => $status, ':target_nid' => $node->nid))->fetchField();
  return intval($count);
}

/**
 * Implements hook_block_info().
 */
function checkdesk_core_block_info() {
  $blocks = array();

  $blocks['post'] = array(
    'info' => 'Report form block',
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function checkdesk_core_block_view($delta = '') {
  switch ($delta) {
    case 'post':
      return checkdesk_core_report_form_block();
  }
}

/**
 * Generate report form.
 */
function checkdesk_core_report_form_block() {
  if (!user_access('create post content')) {
    return array('subject' => NULL, 'content' => NULL);
  }

  // Include page handler for node_add()
  module_load_include('inc', 'node', 'node.pages');
  $title = drupal_get_title();

  // If we're on a story page and there's already a draft, show it.
  $desk_nid = 0;
  if (($node = menu_get_object()) && $node->type == 'discussion') {
    $desk_nid = $node->nid;
  }
  global $user;
  $draft_nid = db_query("
SELECT n.nid
FROM {node} n INNER JOIN {field_data_field_desk} d ON n.nid = d.entity_id
WHERE n.type = 'post'
AND n.status = 0
AND d.field_desk_target_id = :desk_nid
AND n.uid = :uid
  ", array(':desk_nid' => $desk_nid, ':uid' => $user->uid))->fetchCol();
  if ($draft_nid) {
    $draft = node_load($draft_nid);
    $content = node_page_edit($draft);
    $subject = t('Edit draft update');
  }
  else {
    $content = node_add('post');
    $subject = t('Compose new update');
  }

  drupal_set_title($title);
  return array('subject' => $subject, 'content' => $content);
}

/**
 * Implements hook_heartbeat_theme_alter()
 */
function checkdesk_core_heartbeat_theme_alter(&$messages, HeartbeatStream $heartbeatStream) {
  global $base_path, $base_root, $language;
  // Localize some variables
  foreach ($messages as $key => $message) {
    foreach ($message->variables as $variable => $value) {
      // Translate strings
      if (in_array($variable, array('!flag_type', '!fact_checking_status', '!status'))) {
        $messages[$key]->variables[$variable] = t($value);
        // Keep the original one to use it for term load
        $messages[$key]->variables[$variable . '_org'] = $value;
      }
      // Localize URLs
      else if (in_array($variable, array('!url', '!user_url', '!story_url', '!report_url', '!update_url', '!flag_author_url'))) {
        $url = parse_url($value);
        if ($url) {
          $langcode = '';
          $alias = preg_replace('/^' . preg_quote($base_path, '/') . '/', '', $url['path']);
          if (variable_get('locale_language_negotiation_url_part', LOCALE_LANGUAGE_NEGOTIATION_URL_PREFIX) == LOCALE_LANGUAGE_NEGOTIATION_URL_PREFIX) {
            $alias_list = explode('/', $alias, 2);
            if (count($alias_list) == 2) {
              list($langcode, $alias) = $alias_list;
            }
            if (!in_array($langcode, array_keys(language_list()))) {
              $alias = $langcode . '/' . $alias;
            }
          }
          $path = drupal_lookup_path('source', urldecode($alias), $langcode);
          if (empty($path)) $path = $alias;
          $options = array('language' => $language, 'absolute' => TRUE, 'alias' => TRUE);
          if (isset($url['fragment'])) {
            $options['fragment'] = $url['fragment'];
          }
          $messages[$key]->variables[$variable] = url($path, $options);
        }
      }
    }
    $messages[$key]->message = t($message->template->message, $message->variables);
  }

  // Additional processing is not necessary for notifications
  $view = views_get_current_view();
  if (isset($view) && $view->name == 'my_notifications') return;
  $messages_apply_theme = array(
    'status_report',
    'new_comment_report',
    'new_comment_source',
    'new_report',
    'publish_report',
    'checkdesk_new_source',
    'checkdesk_status_source',
  );
  foreach ($messages as $key => $message) {
    if ($message->nid > 0 && in_array($message->message_id, $messages_apply_theme)) {
      $node = node_load($message->nid);
      if ($node->type == 'media' || $node->type == 'source') {
        $messages[$key]->message = theme('checkdesk_heartbeat_content',  array(
          'message' => $message,
          'node' => $node,
          ));
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function checkdesk_core_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    // Move mymodule_form_alter() to the end of the list. module_implements()
    // iterates through $implementations with a foreach loop which PHP iterates
    // in the order that the items were added, so to move an item to the end of
    // the array, we remove it and then add it.
    $group = $implementations['checkdesk_core'];
    unset($implementations['checkdesk_core']);
    $implementations['checkdesk_core'] = $group;
  }
}

function _redirect_footnote_delete($form, &$form_state) {
  if (isset($form_state['redirect'])) {
    $form_state['redirect'] = $_SESSION['comment_referer'];
    unset($_SESSION['comment_referer']);
  }
}
/*
 * Implements hook_form_FORM_ID_alter() for `flag_form`.
*/
function checkdesk_core_form_revisioning_revisions_summary_alter(&$form, $form_state, $form_id) {
    // loall all revisions
    $nid = $form['nid']['#value'];
    $node = node_load($nid);
    $revisions = _revisioning_get_all_revisions_for_node($nid);
    // get first published revisions.
    $first_revision = 0;
    foreach (array_reverse($form['status'], TRUE) as $k => $v) {
         if ($v['#value']) {
             $first_revision = $k;
             break;
         }
    }
    foreach ($form['info'] as $k => $v) {
        $revision = $revisions[$k];
        $text = t('Saved on');
        if ($k == $first_revision) {
           $text = t('First published on');
        }
        elseif ($form['status'][$k]['#value'] && $k <= $node->vid) {
           $text = t('Published changes on');
        }
        $base_url = "node/$nid/revisions/{$revision->vid}";
          $first_cell = t('!text !date !username ',
            array(
            '!date' => l(format_date($revision->timestamp, 'short'), "$base_url/view"),
            '!username' => '<div class="revision-author">' . t('by ') . theme('username', array('account' => $revision)) . '</div>',
            '!text' => $text,
                ));
          $form['info'][$k]['#markup'] = $first_cell;
      }
}

/**
 * Form element validation handler for the user login form.
 *
 * Allows users to authenticate by email, which is our preferred method.
 */
function checkdesk_core_user_login_validate($form, &$form_state) {
  $name = NULL;
  if (isset($form_state['values']['name'])) {
    // Try to load the username matching the email, if any exists.
    $name = db_select('users')
    ->fields('users', array('name'))
    ->condition('mail', db_like($form_state['values']['name']), 'LIKE')
    ->execute()
    ->fetchField();
  }
  // If the value is set, and a valid email, and a match was found, use it.
  if (!empty($name)) {
    // Keep the email value in form state for further use/validation.
    $form_state['values']['email'] = $form_state['values']['name'];

    // If the name matches an e-mail, assume that it's the desired name and
    // set the username in the form values.
    $form_state['values']['name'] = $name;
  }
}

/**
 * Implements hook_form_alter().
 */
function checkdesk_core_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'field_ui_field_overview_form' && $form['#bundle'] == 'media') {
    // Save metadata fields into variables table
    $form['#submit'][] = '_checkdesk_field_group_field_overview_submit';
  }
  //Redirect user to right place after delete footnote
  if ($form_id == 'comment_confirm_delete' && $form['#comment']->node_type == 'comment_node_media') {
    if(!isset($_SESSION['comment_referer'])) {
      //use session to catch referer as destination did not work well with AJAX requests
      $_SESSION['comment_referer'] = $_SERVER['HTTP_REFERER'];
    }
    $form['#submit'][] = '_redirect_footnote_delete';
  }
  // Add a class to forms which should display inline errors
  $ife_form_ids = checkdesk_core_ife_form_ids();
  foreach ($ife_form_ids as $fid => $row) {
    if($form_id == $fid) {
      $form['#attributes']['class'][] = 'ife';
    }
  }
  if ($form_id == 'system_site_information_settings' || $form_id == '_checkdesk_core_settings') {
    //alter submit to purge all varnish caches
    $form['#submit'][] = 'checkdesk_core_site_information_submit';
  }

  if ($form_id == 'user_profile_form' || $form_id == 'user_register_form') {
    $form['account']['name']['#title'] = t('Display name');
  }

  if ($form_id == 'user_login' || $form_id == 'user_login_block') {

    // validate name using our email login function
    $form['name']['#element_validate'][] = 'checkdesk_core_user_login_validate';

    unset($form['name']['#description'], $form['pass']['#description'], $form['links'], $form['twitter_signin']);
    $form['#prefix'] = '<div class="user-login-wrapper modal-dialog-signin modal-dialog-signin-email">';
    $form['#suffix'] = '</div>';
    $form['login_header'] = array(
      '#markup' => '<div class="branding"></div><div class="modal-dialog-description">' . t('Sign in with your email address or username') . '</div>',
      '#weight' => -99,
    );
    $form['name']['#title'] = t('Email address or display name');
    $form['actions']['submit']['#value'] = t('Sign in');
    // Add forgot link and a wrapper around forgot pass and remember me
    $forgot_pass_link = l(t('Forgot your password?'), 'user/password');
    $form['pass']['#suffix'] = '<div class="user-links"><div class="user-forgot-pass-link">' . $forgot_pass_link . '</div>';
    $form['remember_me']['#suffix'] = '</div>';
    $back_link = ctools_modal_text_button(t('Back'), 'checkdesk/nojs/sign_in_up', t('Back'),  'ctools-modal-modal-popup-medium btn btn-default');
    $form['actions']['submit']['#suffix'] = '<div class="back-link user-sigin-back-link">' . $back_link . '</div>';
    $form['#validate'][] = '_modify_drupal_message';
    $form['#attributes']['onsubmit'] = 'var button = jQuery(".form-submit"); button.val(Drupal.t("loading...")); button.attr("disabled", "disabled")';
  }

  if ($form_id == '_checkdesk_core_report_suggest') {
    $form['story']['#prefix'] = '<div class="modal-content-wrapper">';
    $form['story']['#suffix'] = '</div>';
    $form['submit']['#prefix'] = '<div class="modal-footer"><div class="form-actions form-wrapper">
                <button type="button" id="close" class="btn btn-default" data-dismiss="modal" aria-hidden="true"
                onClick="jQuery(\'#close\').trigger(\'click\');" >' . t('Close') . '</button>';
    $form['submit']['#suffix'] = '</div></div>';
    $form['submit']['#value'] = t('Continue');
    $form['submit']['#attributes']['class'] = array('btn', 'btn-primary');
  }

  if ($form_id == 'flag_confirm') {
    $form['actions']['#prefix'] = '<div class="modal-footer">';
    $form['actions']['#suffix'] = '</div>';

    $form['actions']['submit']['#attributes']['class'] = array('btn', 'btn-primary');
    $form['actions']['cancel']['#attributes']['class'] = array('btn');
    $form['actions']['cancel']['#attributes']['id'] = array('close');
    $form['actions']['cancel']['#weight'] = -1;
  }

  if ($form_id == 'node_delete_confirm') {
    if (isset($form['#node'])) {
      if ($form['#node']->type == 'discussion') {
        $form['description']['#markup'] = t('All related updates will be deleted. Are you sure you want to proceed?');
      }
    }
  }

  if ($form_id == 'user_register_form') {
    global $user;

    //Hide administer role so journalist can not give his account a higher role.
    if (!user_access('access administer role')) {
      $form['account']['roles']['#options'] = array_diff($form['account']['roles']['#options'], array('administrator'));
    }
    // Hook on submit to remove misleading message.
    // when registeration required admin approval.
    if (variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL) == USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL) {
      $form['#submit'][] = 'checkdesk_core_user_register_form_submit';
    }
    unset($form['account']['name']['#description']);
    unset($form['account']['pass']['#description']);
    unset($form['account']['mail']['#description']);

    if (!$user->uid) {
      $form['account']['mail']['#title'] = t('Email address');
      $form['actions']['submit']['#value'] = t('Sign up');
      // add extra modal classes
      $form['#prefix'] = '<div class="user-register-wrapper modal-dialog-signin modal-dialog-signin-register">';
      $form['#suffix'] = '</div>';
      $register_header = '<div class="branding"></div>';
      $register_header .= '<div class="modal-dialog-description">'. t('Create a new account') .'</div>';
      $form['register_header'] = array(
        '#markup' => $register_header,
        '#weight' => -99,
      );
      $back_link = ctools_modal_text_button(t('Back'), 'checkdesk/nojs/sign_in_up', t('Back'),  'ctools-modal-modal-popup-medium btn btn-default');
      $form['actions']['submit']['#suffix'] = '<div class="back-link user-register-back-link">' . $back_link . '</div>';
    }
  }

  if ($form_id == 'user_pass') {
    $form['#prefix'] = '<div class="user-forgot-wrapper modal-dialog-signin modal-dialog-signin-forgot">';
    $form['#suffix'] = '</div>';
    $pass_header = '<div class="branding"></div>';
    $pass_header .= '<div class="modal-dialog-description">'. t('Enter the email address you used to create your account,
    and we\'ll send you an email to reset your password') .'</div>';
    $form['pass_header'] = array(
      '#markup' => $pass_header,
      '#weight' => -99,
    );
    $form['name']['#title'] = t('Email address');
    $form['actions']['submit']['#value'] = t('Send');
    $form['#submit'][] = '_modify_drupal_message';
    // Add cancel link
    $form['actions']['submit']['#suffix'] = '<div class="back-link user-pass-back-link" onclick="Drupal.CTools.Modal.dismiss();return false;">' . l(t('Back'), 'user/login', array('attributes' => array('class' => array('btn', 'btn-default')))) . '</div>';

  }

  // theme file field
  if ($form_id == 'discussion_node_form') {
    if (isset($form['#node']->language)) {
      $node_language = $form['#node']->language;
      if (isset($form['field_lead_image'][$node_language])) {
        foreach ($form['field_lead_image'][$node_language] as $item => $field_lead_image) {

          if (!is_numeric($item)) {
            continue;
          }
          if (isset($form['field_lead_image'][$node_language][$item])) {
            // Alter the file field element after it has been built.
            $form['field_lead_image'][$node_language][$item]['#after_build'][] = 'checkdesk_core_rename_remove_button';
          }


        }
      }
    }
  }

  if ($form_id == 'twitter_oauth_callback_form') {
    $form['#validate'][] = '_checkdesk_twitter_oauth_callback_form_validate';
  }

  if ($form_id == 'taxonomy_form_term') {
    // Change text format to avoid translation warning (Ticket #4247)
    $form['description']['#format'] = 'plain_text';
  }
}

/**
 * Twitter oauth custom validation to edit destination.
 */
function _checkdesk_twitter_oauth_callback_form_validate($form, &$form_state) {
    if (isset($_SESSION['twitter_redirect'])) {
        $form_state['twitter_oauth']["destination"] = $_SESSION['twitter_redirect'];
        unset($_SESSION['twitter_redirect']);
    }
}

/**
 * Implement hook_submit();
 * Save metadata fields into variables table
 */
function _checkdesk_field_group_field_overview_submit($form, &$form_state) {
  $metadata_fields = array();
  foreach ($form_state['values']['fields'] as $name => $value) {
    if (!empty($value['parent']) && $value['parent'] == 'group_metadata') {
      $metadata_fields[] = $name;
    }
  }
  variable_set('checkdesk_metadata_fields', $metadata_fields);
}
/**
 * Alter drupal messages
 * TODO revisit implementation
 */
function _modify_drupal_message($form, &$form_state) {
  if ($form['#form_id'] == 'user_pass') {
    drupal_get_messages('status');
    $msg = theme('checkdesk_core_reset_pass', array(
      'resend' => l(t('RESEND'), 'checkdesk_resend_pass/' . $form_state['values']['account']->uid)
    ));
    drupal_set_message($msg);
  }
  else {
    $values = $form_state['values'];
    if (!empty($values['name']) && empty($form_state['uid']) && !isset($form_state['flood_control_triggered'])) {
      drupal_get_messages('error');
      if (empty($values['pass'])) {
        drupal_set_message(t('Password field is required.'), 'error');
      }
      drupal_set_message(t('Email/username and password don\'t match. Try again?'), 'error');
    }
  }
}

function checkdesk_core_rename_remove_button($element, &$form_state) {
  $element['upload_button']['#value'] = t('Upload');
  $element['remove_button']['#value'] = t('Remove');
  // $element['upload']['#prefix'] = '<label class="cabinet">';
  // $element['upload']['#suffix'] = '</label>';
  return $element;
}

function checkdesk_core_user_register_form_submit(&$form, &$form_state) {
  $message = t('Thank you for applying for an account. Your account is currently pending approval by the site administrator.<br />In the meantime, a welcome message with further instructions has been sent to your email address.');
  $position = array_search($message, $_SESSION['messages']['status']);
  if ($position !== FALSE) {
    unset($_SESSION['messages']['status'][$position]);
  }
  $_SESSION['messages']['status'] = array_values($_SESSION['messages']['status']);

  drupal_set_message(t('Thank you for applying for an account. Your account is currently pending approval by the site administrator.'));
}

/**
 * Implements hook_user_insert().
 */
function checkdesk_core_user_insert(&$edit, $account, $category) {
  module_load_include('lib.php', 'twitter');
  //Add new citizen journalist role to all registered users if they don't have another role
  if ((!isset($edit['roles']) || empty($edit['roles']) || array_keys($edit['roles']) === array(DRUPAL_AUTHENTICATED_RID)) && !isset($account->role)) {
    $user_roles = array_flip(user_roles(TRUE));
    $account->roles = array($user_roles['citizen journalist'] => $user_roles['citizen journalist']) + $edit['roles'];
  }

  // Profile image for Twitter
  if (isset($_SESSION['twitter']) && isset($_SESSION['twitter']['values'])) {
    $key = variable_get('twitter_consumer_key', '');
    $secret = variable_get('twitter_consumer_secret', '');
    $response = $_SESSION['twitter']['values'];

    $twitter = new Twitter($key, $secret, $response['oauth_token'], $response['oauth_token_secret']);
    try {
      $twitter_account = $twitter->users_show($response['screen_name']);
    } catch (TwitterException $e) {
      form_set_error('screen_name', t('Request failed: @message.', array('@message' => $e->getMessage())));
      return;
    }
    $twitter_account->set_auth($response);
    _twitter_signin_get_picture($account, $twitter_account);
  }
}

/**
 * Import twitter profile picture
 **/
function _twitter_signin_get_picture($account, $twitter_account) {
  if ($account->uid) {
    $picture_directory =  file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures');
    if(file_prepare_directory($picture_directory, FILE_CREATE_DIRECTORY)) {
      $source_url = $twitter_account->profile_image_url;
      $picture_path = file_stream_wrapper_uri_normalize($picture_directory . '/twitter-picture-' . $account->uid . '-' . REQUEST_TIME . substr($source_url, -4));
      $picture_file = file_save_data(file_get_contents($source_url), $picture_path, FILE_EXISTS_REPLACE);

      // Check to make sure the picture isn't too large for the site settings.
      $max_dimensions = variable_get('user_picture_dimensions', '85x85');
      file_validate_image_resolution($picture_file, $max_dimensions);
      // Update the user record.
      $picture_file->uid = $account->uid;
      $picture_file = file_save($picture_file);
      file_usage_add($picture_file, 'user', 'user', $account->uid);
      db_update('users')
        ->fields(array(
          'picture' => $picture_file->fid,
        ))
        ->condition('uid', $account->uid)
        ->execute();
    }
  }
}

/**
 * Implements hook_views_query_alter
 * @param type $view
 * @param type $query
 */
function checkdesk_core_views_query_alter(&$view, &$query) {

  if ($view->name == 'checkdesk_search') {
    // Check if we are displaying reports (for incoming reports sidebar)
    $is_reports = FALSE;
    if ((isset($view->old_view[1]) && $view->old_view[1]->current_display == 'incoming_reports') || $view->current_display == 'incoming_reports' || (isset($_GET['type']) && $_GET['type'] === 'report')) {
      $is_reports = TRUE;
    }
    // Update type condition with right values.
    if (isset($_GET['type']) && $_GET['type'] !== 'All') {
      foreach($query->where[1]['conditions'] as $k => $v) {
        if (is_string($v['field']) && $v['field'] === 'node.type') {
          $selected_type = array();
          if ($_GET['type'] === 'report') {
            $selected_type = array('media');
          }
          elseif ($_GET['type'] === 'update') {
            $selected_type = array('post');
          }
          elseif ($_GET['type'] === 'story') {
            $selected_type = array('discussion');
          }
          elseif ($_GET['type'] === 'source') {
            $selected_type = array('source');
          }
          $query->where[1]['conditions'][$k]['value'] = $selected_type;
        }
      }
    }

    if ($is_reports) {
      // Add where condition based on flag type for reports.
      if (isset($_GET['media_flags'])) {
        switch($_GET['media_flags']) {
          case 'flagged_spam':
            $query->add_where(1,'flagging_node.uid', 1, 'IS NOT NULL');
            break;
          case 'flagged_gc':
            $query->add_where(1,'flagging_node_1.uid', 1, 'IS NOT NULL');
            break;
        }
      }
      // Add associated stories condition.
      if (isset($_GET['report_story']) && ($_GET['report_story'] === 'None' || is_numeric($_GET['report_story']))) {
        $join = new views_join();
        $join->construct('field_data_field_stories', 'node', 'nid', 'entity_id', array(), 'LEFT');
        $query->add_relationship('fdfs', $join, 'field_data_field_stories');
        if ($_GET['report_story'] === 'None') {
          $query->add_where(1,'fdfs.field_stories_target_id', 1, 'IS NULL');
        }
        else {
          $query->add_where(1,'fdfs.field_stories_target_id', intval($_GET['report_story']), '=');
        }
      }
      // Add publication status filter
      if (isset($_GET['report_publication']) && $_GET['report_publication'] !== 'All') {
        $join = new views_join();
        $join->construct('checkdesk_reports_publication', 'node', 'nid', 'report_nid', array(), 'LEFT');
        $query->add_relationship('cru', $join, 'report_nid');
        if ($_GET['report_publication'] === 'report_unpublished') {
          $query->add_where(1,'cru.report_nid', 1, 'IS NULL');
        }
        else {
          $query->add_where(1,'cru.report_nid', 1, 'IS NOT NULL');
        }
      }
    }

    if (isset($_GET['type']) && $_GET['type'] === 'update' &&
        isset($_GET['update_story']) && is_numeric($_GET['update_story'])
    ) {
      $join = new views_join();
      $join->construct('field_data_field_desk', 'node', 'nid', 'entity_id', array(), 'LEFT');
      $query->add_relationship('fdfd', $join, 'field_data_field_desk');
      $query->add_where(1,'fdfd.field_desk_target_id', intval($_GET['update_story']), '=');
    }
    // Add author condition.
    if (isset($_GET['author']) && $_GET['author'] !== 'All') {
      $query->add_where(1,'users_node.name', $_GET['author'], 'LIKE');
    }
    if (isset($query->having[1]['conditions'][0]['value'][':search_index_keys'])) {
      // Set value equal to 1 to apply OR searching
      // Ticket #3550
      $query->having[1]['conditions'][0]['value'][':search_index_keys'] = 1;
    }
    // Fix helper text in case of search by keyword.
    if ($view->current_display === 'attachment_1') {
      if (isset($view->old_view[1]) && $view->old_view[1]->current_display == 'incoming_reports') {
        $query->where[1]['conditions'][0]['value'] = array('media');
      }
      if (empty($view->exposed_raw_input['keys'])) {
        $query->having = $query->groupby = array();
      }
      elseif (isset($query->having[1]['conditions'][0]['value'][':search_index_keys1'])) {
        // Set value equal to 1 to apply OR searching
        // Ticket #3550
        $query->having[1]['conditions'][0]['value'][':search_index_keys1'] = 1;
      }
    }
  }
  elseif ($view->name == 'recent_stories_by_tag') {
      // exclude current nid
      if (is_numeric(arg(1))) {
        $query->add_where(1,'node.nid', arg(1), '!=');
      }
  }
  elseif ($view->name == 'user_stories') {
    if (arg(0) == 'user' && is_numeric(arg(1))) {
      $query->where[2]['conditions'][0]['value'] = array(arg(1));
      $query->where[2]['conditions'][1]['value'] = arg(1);
    }
  }
  elseif ($view->name == 'followed_stories') {
    if (arg(0) == 'user' && is_numeric(arg(1))) {
      $query->where[1]['conditions'][2]['value'] = array(arg(1));
      $query->where[2]['conditions'][0]['value'] = arg(1);
    }
  }
}

/**
 * Implements hook_views_api().
 */
function checkdesk_core_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'checkdesk_core'),
  );
}

/**
 * Implements hook_views_default_views_alter().
 */
function checkdesk_core_views_default_views_alter(&$data) {
  if (isset($data['admin_views_user'])) {
    $data['admin_views_user']->display['default']->display_options['fields']['views_bulk_operations']['vbo']['operations']['action::user_block_user_action'] = array(
      'selected' => 1,
      'postpone_processing' => 0,
      'skip_confirmation' => 1,
      'override_label' => 1,
      'label' => 'Block user',
    ); /* WAS: '' */
  }

  if (isset($data['admin_views_node'])) {
    $data['admin_views_node']->display['default']->display_options['fields']['views_bulk_operations']['vbo']['operations']['action::checkdesk_core_node_set_language'] = array(
      'selected' => 1,
      'postpone_processing' => 0,
      'skip_confirmation' => 1,
      'override_label' => 0,
      'label' => '',
    ); /* WAS: '' */
    $data['admin_views_node']->display['default']->display_options['fields']['language'] = array(
      'id' => 'language',
      'table' => 'node',
      'field' => 'language',
    );
  }

}

/**
 * Implements hook_email_registration_name().
 */
function checkdesk_core_email_registration_name($edit, $account) {
  // Strip off everything after the @ sign.
  $new_name = preg_replace('/@.*$/', '', $edit['mail']);
  // Clean up the username.
  $new_name = email_registration_cleanup_username($new_name);
  return $new_name;
}

/**
 * Implements hook_wysiwyg_plugin().
 */
function checkdesk_core_wysiwyg_plugin($editor, $version) {
  switch ($editor) {
    case 'ckeditor':
      if ($version >= 4) {
        return array(
          'confighelper' => array(
            'vendor url' => 'http://ckeditor.com/addon/confighelper',
            'path' => drupal_get_path('module', 'checkdesk_core') . '/ckeditor/plugins/confighelper',
            'filename' => 'plugin.js',
            'extensions' => array(
              'confighelper' => t('Config helper'),
            ),
            'load' => TRUE,
          ),
          //
          'mediaoembed' => array(
            'path' => drupal_get_path('module', 'checkdesk_core') . '/ckeditor/plugins/mediaoembed',
            'filename' => 'plugin.js',
            'extensions' => array(
              'mediaoembed' => t('Media Oembed'),
            ),
            'load' => TRUE,
            'buttons' => array(
              'mediaoembed' => t('Media Oembed'),
            ),
          ),
          // mediaembed plugin from https://github.com/frozeman/MediaEmbed
          'mediaembed' => array(
            'path' => drupal_get_path('module', 'checkdesk_core') . '/ckeditor/plugins/mediaembed',
            'filename' => 'plugin.js',
            'load' => TRUE,
            'buttons' => array(
              'MediaEmbed' => t('Media Embed'),
            ),
          ),
        );
      }
      break;
  }
}

/**
 * Implements hook_wysiwyg_editor_settings_alter().
 *
 * Have the editor use the current language. There are open bugs for WYSIWYG
 * module to do this automatically..
 */
function checkdesk_core_wysiwyg_editor_settings_alter(&$settings, $context) {
  global $language, $base_path;

  $settings['language']       = $language->language;
  $settings['directionality'] = $language->direction == LANGUAGE_RTL ? 'rtl' : 'ltr';

  if ($language->direction == LANGUAGE_RTL && isset($settings['contentsCss'])) {
    foreach ($settings['contentsCss'] as $key => $path) {
      $filepath = substr(preg_replace('/^' . preg_quote($base_path, '/') . '/', '', $path), 0, -4);
      $filepath_rtl = $filepath . '-rtl.css';

      if (file_exists($filepath_rtl)) {
        $settings['contentsCss'][$key] = $base_path . $filepath_rtl;
      }
    }
  }

  // Hide crazy link settings
  $settings['linkShowAdvancedTab'] = FALSE;
  $settings['linkShowTargetTab'] = FALSE;


  if ($context['profile']->editor == 'ckeditor') {
    $settings['forcePasteAsPlainText'] = TRUE;
    $settings['disableNativeSpellChecker'] = FALSE;
    $settings['fillEmptyBlocks'] = FALSE;
    $settings['customConfig'] = base_path() . drupal_get_path('module', 'checkdesk_core') . '/ckeditor/custom_config.js';
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for `user_cancel_confirm_form`.
 */
function checkdesk_core_form_user_cancel_confirm_form_alter(&$form, $form_state) {
  $form['#action'] .= '?destination=admin/people';
}

/**
 * Ensures that the IFE module settings are properly installed in the database.
 */
function checkdesk_core_ensure_ife_settings() {

  $form_ids = checkdesk_core_ife_form_ids();

  $defaults = array(
    'field_types' => NULL,
    'status'      => '1',
    'display'     => '-1'
  );

  db_query("TRUNCATE TABLE {ife}");

  foreach ($form_ids as $form_id => $row) {
    $row = array_merge($defaults, $row);

    $row['form_id'] = $form_id;

    db_insert('ife')
      ->fields($row)
      ->execute();
  }
}

/**
 * Forms that will use inline form errors
 */

function checkdesk_core_ife_form_ids() {
  $form_ids = array(
    'article_node_form'     => array(),
    'discussion_node_form'  => array(),
    'forum_node_form'       => array(),
    'media_node_form'       => array(),
    'node_export_node_form' => array(),
    'page_node_form'        => array(),
    'post_node_form'        => array(),
    'flag_confirm'          => array(),

    'comment_form'          => array(),

    'contact_mail_page'     => array(),
    'contact_mail_user'     => array(),

    'user_login'            => array(),
    'user_login_block'      => array(),
    'user_pass'             => array(),
    'user_register_form'    => array(),
    'user_profile_form'     => array(),
  );

  return $form_ids;
}

/**
 * Implements hook_query_TAG_alter() for features_menu_links.
 */
function checkdesk_core_query_features_menu_link_alter($query) {
  $query->fields('menu_links', array('uuid', 'language', 'customized'));
}

/**
 * Implements hook_query_TAG_alter() for entityreference.
 */
function checkdesk_core_query_entityreference_alter($query) {
  if (!empty($query->alterMetaData['field']) && ($query->alterMetaData['field']['field_name'] === 'field_stories' || $query->alterMetaData['field']['field_name'] === 'field_desk')) {
    if ($query->alterMetaData['field']['field_name'] === 'field_stories') {
      $nids = array_keys(_checkdesk_get_stories_by_activity(TRUE));
      if (isset($_GET['ref_nid']) && is_numeric($_GET['ref_nid'])) {
        $nids[] = $_GET['ref_nid'];
      }
    }
    else {
      $nids = db_query_range("SELECT nid FROM {node} WHERE type='discussion' ORDER BY created DESC", 0, 50)->fetchCol();
      if (isset($_GET['story']) && is_numeric($_GET['story'])) {
        $nids[] = $_GET['story'];
      }
    }
    // Add story nid (edit form)
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $target_story = node_load(arg(1));
      if ($target_story && in_array($target_story->type, array('post', 'media'))) {
        $field_name = ($target_story->type == 'media') ? 'field_stories' : 'field_desk';
        if (isset($target_story->{$field_name}[LANGUAGE_NONE][0]['target_id'])) {
          $nids[] = $target_story->{$field_name}[LANGUAGE_NONE][0]['target_id'];
        }
      }
    }
    $query->condition('nid', $nids, 'IN');
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for `flag_confirm`.
 */
function checkdesk_core_form_flag_confirm_alter(&$form, $form_state, $form_id) {
  $form['field_reason'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('Reason');
}

/**
 * Implements hook_form_FORM_ID_alter() for `twitter_oauth_callback_form`.
 */
function checkdesk_core_form_twitter_oauth_callback_form_alter(&$form, $form_state) {
  if (isset($_SESSION['twitter_oauth']['signin'])) {
    //add function to show msg if user still blocked.
    $form['#submit'][] = '_checkdesk_twitter_signin_user_status';
  }
}

function _checkdesk_twitter_signin_user_status(&$form, &$form_state) {
 $account = $form_state['twitter_oauth']['account'];
 if (!$account->status) {
   drupal_set_message(t('The username %name has not been activated or is blocked.', array('%name' => $account->name)), 'error');
 }
}

/**
 * Implements hook_action_info().
 */
function checkdesk_core_action_info() {
  return array(
    'checkdesk_core_node_set_language' => array(
      'type' => 'node',
      'label' => t('Set language'),
      'configurable' => TRUE,
      'behavior' => array('changes_property'),
    ),
  );
}

/**
 * Form function for action `checkdesk_core_node_set_language`.
 */
function checkdesk_core_node_set_language_form($context) {
  $languages = array();
  foreach (language_list() as $langcode => $language) {
    $languages[$langcode] = $language->name;
  }
  $form['language'] = array(
    '#title' => t('Language'),
    '#type' => 'select',
    '#options' => $languages,
    '#default_value' => @$context['language'],
  );
  return $form;
}

/**
 * Submit function for action `checkdesk_core_node_set_language`.
 */
function checkdesk_core_node_set_language_submit($form, $form_state) {
  return array('language' => $form_state['values']['language']);
}

/**
 * Action function for action `checkdesk_core_node_set_language`.
 */
function checkdesk_core_node_set_language($node, $context) {
  $node->language = $context['language'];
  watchdog('action', 'Set node language to %language.', array('%language' => $context['language']));
}

/**
 * Implements hook_filter_info().
 */
function checkdesk_core_filter_info() {
  $filters['filter_checkdesk_markup'] = array(
    'title' => t('Checkdesk markup filter'),
    'description' => t('Replace bad characters, that can mess up Arabic text.'),
    'prepare callback' => '_checkdesk_core_filter_prepare',
    'process callback' => '_checkdesk_core_filter_process',
    'tips callback' => '_checkdesk_core_filter_tips',
    'cache' => FALSE,
  );
  return $filters;
}

/**
 * Checkdesk filter prepare callback.
 */
function _checkdesk_core_filter_prepare($text, $filter) {
  return $text;
}

/**
 * Time filter process callback.
 *
 * Now, in the "process" step, we'll search for problematic characters
 * and replace them by safe ones.
 */
function _checkdesk_core_filter_process($text, $filter) {
  $replacements = array(
    // On Google Chrome, on Windows, '&nbsp;' is replaced by '!' when using font 'Amiri'
    '/&nbsp;/' => ' ',
  );
  $text = preg_replace(array_keys($replacements), array_values($replacements), $text);
  return $text;
}

/**
 * Filter tips callback for Checkdesk filter.
 *
 */
function _checkdesk_core_filter_tips($filter, $format, $long = FALSE) {
}

/**
 * Implements hook_node_insert().
 */
function checkdesk_core_node_insert($node) {
  checkdesk_varnish_pages_to_purge('node', $node, 'insert');
  if ($node->type === 'post') {
    // Update story when a new update is created in this story
    if (isset($node->field_desk[LANGUAGE_NONE][0]['target_id'])) {
      db_update('node')
        ->fields(array(
          'changed' => $node->changed,
        ))
        ->condition('nid', $node->field_desk[LANGUAGE_NONE][0]['target_id'])
        ->execute();
    }
  }
  elseif ($node->type == 'discussion') {
    $path = array(
      'source' => 'node/' . $node->nid . '/collaboration',
      'alias' => 'story/' . $node->nid . '/collaboration',
    );
    path_save($path);
  }
}

/**
 * Implements hook_node_update().
 */
function checkdesk_core_node_update($node) {
  checkdesk_varnish_pages_to_purge('node', $node, 'update');
}

/**
 * Implements hook_node_delete().
 */
function checkdesk_core_node_delete($node) {
  if ($node->type == 'discussion') {
    //Delete all related update
    $query = db_select('field_data_field_desk', 'fd');
    $query->fields('fd', array('entity_id'));
    $query->condition('fd.field_desk_target_id', $node->nid);
    $query->join('node', 'n', 'n.nid = fd.entity_id');
    $query->condition('n.type', 'post');
    $updates = $query->execute()->fetchCol();
    foreach($updates as $row) {
      node_delete($row);
    }
  }
  checkdesk_varnish_pages_to_purge('node', $node, 'delete');
}

/**
 * Implements hook_preprocess_htmlmail().
 */
function checkdesk_core_preprocess_htmlmail(&$variables) {
  $directions = array('ltr', 'rtl');
  $variables['direction'] = (isset($variables['language']) ? $directions[$variables['language']->direction] : 'ltr');
}

/**
 * Implements hook_variable_info().
 */
function checkdesk_core_variable_info($options) {
  $variable['checkdesk_site_owner'] = array(
    'type' => 'string',
    'title' => t('Checkdesk site owner', array(), $options),
    'description' => t('Checkdesk site owner'),
    'default' => '',
    'localize' => TRUE,
  );
  return $variable;
}

/**
 * Function to generate custom format interval
 * issue #1930
 */
function checkdesk_core_custom_format_interval($timestamp) {
  $interval = time() - $timestamp;
  $y = 31536000;
  $m = 2592000;
  $d = 86400;
  //interval over 1 year
  if ($interval > $y) {
    return format_date($timestamp, 'custom', t('j M Y'));
  }
  //interval between 5 days and year
  if ($interval > (5*$d) && $interval <= $y ) {
    return format_date($timestamp, 'custom', t('M j'));
  }
  //less than 5 sec (as soos as item is posted)
  if ($interval < 5) {
    return t('now');
  }
  //interval beteen one day and 5 days.
  if ($interval >= $d && $interval <= (5*$d)) {
    $count = floor($interval / $d);
    return t('@countd', array('@count' => $count));
  }
  //interval less than one day
  $units = array(
    'h' => 3600,
    'm' => 60,
    's' => 1,
  );
  $output = '';
  foreach ($units as $key => $value) {
    if ($interval >= $value) {
      $count = floor($interval / $value);
      $output = t("@count$key", array('@count' => $count));
      break;
    }
  }
  return $output;
}

/**
 * Generate a title to a node based on its body.
 * Used by auto_nodetitle to set titles of updates.
 */
function _checkdesk_core_auto_title($node) {
  $replacements = array('/\[[^]]+\]/' => '', '/&nbsp;/' => ' '); // &nbsp; would be decoded as a non-UTF-8 char
  $body = html_entity_decode(strip_tags(preg_replace(array_keys($replacements), array_values($replacements), @$node->body[LANGUAGE_NONE][0]['value'])));
  if (empty($body)) {
    return t('Update');
  }
  $title = (mb_strlen($body) > 25) ? mb_substr($body, 0, 22) . '...' : $body;
  return $title;
}

/**
 * Ajax command to call Drupal.attachBehaviors passing $selector as context
 */
function checkdesk_core_ajax_command_attach_behaviors($selector = NULL) {
  $command = array(
    'command' => 'attachBehaviors',
    'selector' => $selector,
  );
 return $command;
}

/**
 * Implements hook_flag_javascript_info_alter().
 */
function checkdesk_core_flag_javascript_info_alter(&$info) {
  if ($info['flagName'] != 'follow_story') {
    // TODO user nodejs to update report activities
    $nid = $info['contentId'];
    $node = node_load($nid);
    $element = node_view($node);
    $element['comments'] = comment_node_page_additions($node);
    $commands = array();
    if ($info['flagName'] == 'factcheck_journalist') {
      // update activity stream
      $report_activity = theme(
          'checkdesk_reports_report_activity', array('node' => $node, 'content' => $element)
      );
      $commands[] = ajax_command_invoke('.report-activity-node-' . $node->nid, 'replaceWith', array($report_activity));
    }
    else {
      $output = drupal_render($element);
      $js = drupal_add_js(NULL, NULL);
      $settings = '';
      if (isset($js['settings'])) {
        $settings = '<script type="text/javascript">jQuery.extend(Drupal.settings, ' .
            drupal_json_encode(call_user_func_array('array_merge_recursive', $js['settings']['data'])) .
            ');</script>';
      }
      // Add the settings to the form
      $output .= $settings;
      $commands[] = ajax_command_invoke('.default-view-node-' . $nid, 'replaceWith', array($output));
      $commands[] = checkdesk_core_ajax_command_attach_behaviors('.node-' . $nid);
    }
    $info['commands'] = $commands;
  }
}

/**
 * Implements hook_preprocess() for user_alert theme.
 */
function checkdesk_core_preprocess_user_alert(&$vars) {
  $vars['body'] = $vars['node']->body[LANGUAGE_NONE][0]['value'];
  $vars['is_closeable'] = TRUE;
}

/**
 * Implements hook_clientside_validation_form_alter().
 */
function checkdesk_core_clientside_validation_form_alter(&$form, &$form_state, &$js_rules) {
  if ($form['#form_id'] == 'user_register_form') {

    // Passwords must match
    $value = array(
      'element_name' => $form['account']['pass']['pass1']['#name'],
      'name' => $form['account']['pass']['pass1']['#title'],
    );
    _clientside_validation_set_equal($form['account']['pass']['pass2']['#name'], $form['account']['pass']['pass2']['#title'], $value, $js_rules, t('mismatch'));

    // Password min length
    $min = variable_get('logintoboggan_minimum_password_length', 0);
    if ($min) {
      _clientside_validation_set_minmaxlength($form['account']['pass']['pass1']['#name'], $form['account']['pass']['pass1']['#title'], $min, 1, $js_rules, t('too short'));
      _clientside_validation_set_minmaxlength($form['account']['pass']['pass2']['#name'], $form['account']['pass']['pass2']['#title'], $min, 1, $js_rules, t('too short'));
    }

    // E-mail must be valid
    _clientside_validation_set_email($form['account']['mail']['#name'], $form['account']['mail']['#title'], $js_rules, t('invalid'));

    // Customize error messages to shorter strings
    foreach (array('name', 'mail', 'pass[pass1]', 'pass[pass2]') as $field) {
      $js_rules[$field]['messages']['required'] = t('required');
    }

    // Username must be unique
    _checkdesk_validation_set_unique_field('users', $form['account']['name']['#name'], $form['account']['name']['#title'], $js_rules, t('unavailable'));

    // E-mail must be unique
    _checkdesk_validation_set_unique_field('users', $form['account']['mail']['#name'], $form['account']['mail']['#title'], $js_rules, t('unavailable'));

  }
}

/**
 * Set validation rule for unique fields.
 */
function _checkdesk_validation_set_unique_field($table, $name, $title, &$js_rules, $message = '') {
  $title = _clientside_validation_set_title($title);
  $js_rules[$name]['unique'] = $table;
  $variables = array(
    'message' => empty($message) ? 'The value in !title is already taken.' : $message,
    'placeholders' => empty($message) ? array('!title' => $title) : array(),
    'error_type' => 'unique',
    'element_name' => $name
  );
  $js_rules[$name]['messages']['unique'] = theme('clientside_error', $variables);
}

/**
 * Menu callback function for checkdesk_validation/unique_field.
 */
function _checkdesk_validation_ajax_unique_field() {
  $value = filter_xss($_POST['value']);
  $table = filter_xss($_POST['table']);
  $field = filter_xss($_POST['field']);
  $exists = db_select($table)
            ->fields($table, array($field))
            ->condition($field, $value)
            ->execute()
            ->rowCount();
  return drupal_json_output(array('result' => !(bool)$exists));
}

/**
 * Implements hook_search_preprocess().
 */
function checkdesk_core_search_preprocess($text) {
  // Reject overly long 2 byte sequences, as well as characters above U+10000
  $text = preg_replace('/[\x00-\x08\x10\x0B\x0C\x0E-\x19\x7F]'.
    '|[\x00-\x7F][\x80-\xBF]+'.
    '|([\xC0\xC1]|[\xF0-\xFF])[\x80-\xBF]*'.
    '|[\xC2-\xDF]((?![\x80-\xBF])|[\x80-\xBF]{2,})'.
    '|[\xE0-\xEF](([\x80-\xBF](?![\x80-\xBF]))|(?![\x80-\xBF]{2})|[\x80-\xBF]{3,})/S',
    '', $text);

  // Reject overly long 3 byte sequences and UTF-16 surrogates
  $text = preg_replace('/\xE0[\x80-\x9F][\x80-\xBF]'.
    '|\xED[\xA0-\xBF][\x80-\xBF]/S', '', $text);

  return $text;
}

/**
 * Implements hook_system_info_alter().
 */
function checkdesk_core_system_info_alter(&$info, $file, $type) {
  //prevent overlay module from being enabled Issue #2039.
  if ($file->name == 'overlay' && $type == 'module') {
    //add dependencies to non exist module.
    $info['dependencies'] = array('checkdesk_not_exist');
  }
}

/**
 * Utility function to set $alpha and $omega for layouts
 */
function checkdesk_core_direction_settings() {
  // set $alpha and $omega for language directions
  global $language;
  $layout = array();
  if ($language->direction == LANGUAGE_RTL) {
    $layout['alpha'] = 'right';
    $layout['omega'] = 'left';
  } else {
    $layout['alpha'] = 'left';
    $layout['omega'] = 'right';
  }

  return $layout;
}

/*
 * Implements hook_core_pathauto_alias_alter().
 */
function checkdesk_core_pathauto_alias_alter(&$alias, array &$context) {
  // Force all aliases to be saved as language neutral.
  $context['language'] = LANGUAGE_NONE;
}

/**
 * Add cc and js for chosen lib.
 */
function _checkdesk_add_chosen_components() {
    // Add CSS file for chosen
    drupal_add_css(
      drupal_get_path('theme', 'checkdesk') . '/assets/css/components/chosen.css',
      array(
        'scope' => 'footer',
        'group' => CSS_THEME,
        'weight' => '9990',
        'every_page' => FALSE,
      )
    );
    // Add Chosen lib
    drupal_add_js(
      drupal_get_path('theme', 'checkdesk') . '/assets/js/libs/chosen.jquery.min.js',
      array(
        'scope' => 'footer',
        'group' => JS_THEME,
        'weight' => '9990',
        'every_page' => FALSE,
      )
    );
    // add chosen.js
    drupal_add_js(
      drupal_get_path('theme', 'checkdesk') . '/assets/js/chosen.js',
      array(
        'scope' => 'footer',
        'group' => JS_THEME,
        'weight' => '9990',
        'every_page' => FALSE,
      )
    );
}

/**
 * Implements hook_comment_delete().
 */
function checkdesk_core_comment_delete($comment) {
  // Delete messages from deleted comments.
  $query = db_select('heartbeat_activity', 'ha');
  $query->addField('ha', 'uaid');
  $query->condition('cid', $comment->cid);
  $query->condition('nid', $comment->nid);
  foreach ($query->execute() as $row_object) {
    $uaids[] = $row_object->uaid;
  }
  if (!empty($uaids)) {
    heartbeat_activity_delete($uaids);
  }
}

/**
 * Implements hook_flag_flag().
 */
function checkdesk_core_flag_flag($flag, $entity_id, $account, $flagging) {
  if ($flag->name == 'graphic_journalist') {
    $node = node_load($entity_id);
    checkdesk_varnish_pages_to_purge($flag->entity_type, $node, 'update');
  }
}

/**
 * Implements hook_flag_unflag().
 */
function checkdesk_core_flag_unflag($flag, $entity_id, $account, $flagging) {
  if ($flag->name == 'graphic_journalist') {
    $node = node_load($entity_id);
    checkdesk_varnish_pages_to_purge($flag->entity_type, $node, 'update');
  }
}

/**
 * Implements hook_cron().
 */
/** Disable it for now
function checkdesk_core_cron() {
  //Remove active story (older than 2 weeks)
  $time = strtotime("-2 week");
  db_query('
     UPDATE {field_data_field_active_story}
     SET field_active_story_value = :inactive_story
     WHERE entity_id IN (SELECT nid FROM {node} WHERE type = :type AND changed < :time)
  ', array(
      ':inactive_story' => 0,
      ':type' => 'discussion',
      ':time' => $time,
    ));
}
 */
/**
 * Implements hook_cron_queue_info().
 */
function checkdesk_core_cron_queue_info() {
  $queues['checkdesk_varnish'] = array(
    'worker callback' => '_checkdesk_purge_varnish',
    'skip on cron' => TRUE,
  );
  return $queues;
}

/**
 * Implements hook_cron_queue_info_alter().
 */
function checkdesk_core_cron_queue_info_alter(&$queues) {
  $queues['rules_scheduler_tasks']['skip on cron'] = TRUE;
}

/**
 * Implements hook_cron().
 */
function _checkdesk_purge_varnish($paths) {
  if (module_exists('varnish')) {
    //any action reflect on frontpage
    if (count($paths)) {
      $languages = language_list();
      $hostnames = variable_get('hostnames', array());
      //define purge_all variable as no need to generate  URLs if purge all exist.
      $purge_all = FALSE;
      if (in_array('varnish_purge_all_pages', $paths)) {
        $purge_all = TRUE;
      }
      foreach ($hostnames as $hostname) {
        $urls = array();
        // Add front page
        $paths[] = '<front>';
        // Add search page (Ticket #4688)
        $paths[] = 'search';
        if (!$purge_all) {
          foreach ($paths as $path) {
            foreach($languages as $key => $value) {
              $urls[] = ltrim(url($path, array(
                'language' => $languages[$key],
              )),'/');
            }
          }
        }
        else {
          $urls = array(base_path());
        }
        varnish_purge_paths($hostname, $urls);
        //adding sleep for 2 seconds
        sleep(2);
        //watchdog('checkdesk_varnish', 'Purged varnish cache in queue');
        if (module_exists('checkdesk_fbcache')) {
          checkdesk_fbcache_bulk_scrape($hostname, $urls);
        }
      }
    }
  }
}

/**
 *
 */
function checkdesk_core_site_information_submit(&$form, &$form_state) {
  $paths = array();
  //add static keyword to identify purged all caches
  $paths[] = 'varnish_purge_all_pages';
  $queue = DrupalQueue::get('checkdesk_varnish');
  $queue->createItem($paths);
}

/**
 *
 */
function checkdesk_varnish_pages_to_purge($type, $object, $op) {
  if (!module_exists('varnish')) {
    return;
  }
  $paths = array();
  if ($type == 'node') {
    //check insert
    //only published content that will need to purge from varnish cache
    //no need to check media content as it does not include on any update yet.
    if ($op == 'insert' && $object->status != 0) {
      switch($object->type) {
      case 'discussion':
        $paths[] = 'node/'. $object->nid;
        break;
      case 'post':
        //get story nid
        $paths[] = 'node/'. $object->field_desk[LANGUAGE_NONE][0]['target_id'];
        break;
      }
    }
    //case update or delete
    if ($op == 'update' || $op == 'delete') {
      switch($object->type) {
      case 'discussion':
        $paths[] = 'node/'. $object->nid;
        break;
      case 'post':
        //get story nid
        $paths[] = 'node/'. $object->field_desk[LANGUAGE_NONE][0]['target_id'];
        break;
      case 'media':
        if (isset($object->field_stories[LANGUAGE_NONE][0]['target_id'])) {
          $paths[] = 'node/'. $object->field_stories[LANGUAGE_NONE][0]['target_id'];
        }
        $paths[] = 'node/'. $object->nid;
        break;
      }
    }
  }
  if (count($paths)) {
    //store pages on Queue to purge them on cron task.
    $queue = DrupalQueue::get('checkdesk_varnish');
    $queue->createItem($paths);
  }
}

/**
 * Render heartbeat activity on story collaboration page.
 *
 * @param onject $row
 *  heartbeat activity object
 *
 * @return HTML for target node (update/report)
 */
function checkdesk_story_collaborate_render_object($row) {
  $node = node_load($row->heartbeat_activity_nid);
  $node->heartbeat_row = $row;
  if ($row->heartbeat_activity_message_id == 'checkdesk_follow_story') {
    $node_view = node_view($node);
  }
  else {
    $node_view = node_view($node, 'checkdesk_collaborate');
  }
  $output = render($node_view);
  return $output;
}

/**
 * Add updates/collaboration tab to story node.
 *
 * @param int $nid
 *  story nid
 */
function _checkdesk_story_tabs($nid) {
  $items = array();
  $items[] = array(
    'data' => l(t('Updates'), 'node/'. $nid),
    'class' => array('story-tab-updates'),
  );
  $items[] = array(
    'data' => l(t('Collaboration'), 'node/'. $nid .'/collaboration'),
    'class' => array('story-tab-collaboration'),
  );
  return theme('item_list', array('items' => $items, 'title' => '', 'attributes' => array('class' => 'story-tabs')));
}

/**
 * Return story nid to filler incomming reports view.
 */
function checkdesk_core__get_desk_reports_args() {
  $story_nid = 'all';
  // Show incoming reports on story page or update form.
  if (is_numeric(arg(1))) {
    $nid = arg(1);
    $node = node_load($nid);
    if ($node->type == 'discussion') {
      $story_nid = $nid;
    }
    else if ($node->type == 'post' && isset($node->field_desk[LANGUAGE_NONE][0]['target_id'])) {
      $story_nid = $node->field_desk[LANGUAGE_NONE][0]['target_id'];
    }
  }
  elseif (isset($_GET['story']) && is_numeric($_GET['story'])) {
    $story_nid = $_GET['story'];
  }
  return $story_nid;
}

/**
 * Function to delete follow story activity (unfollow action)
 *
 * @param int $target_nid
 *  story nid
 * @param int $uid
 *  user uid
 */
function _checkdesk_delete_follow_story_activity($target_nid, $uid = 0) {
  if (!$uid) {
    global $user;
    $uid = $user->uid;
  }
  $uaids = db_query('
  SELECT uaid
  FROM {heartbeat_activity}
  WHERE message_id = :message_id AND nid_target = :target_nid AND uid = :uid
  ', array(':message_id' => 'checkdesk_follow_story', ':target_nid' => $target_nid, ':uid' => $uid))->fetchCol();

  if (count($uaids)) {
    heartbeat_activity_delete($uaids);
  }
}

/**
 * implements of hook_rules_action_info().
 */
function checkdesk_core_rules_action_info() {
  $actions = array(
    'checkdesk_core_actions_set_followers' => array(
      'label' => t('Set current user as follower'),
      'group' => t('Node'),
      'parameter' => array(
        'node' => array(
          'type' => 'node',
          'label' => t('Node to follow.'),
        ),
      ),
    ),
  );
  return $actions;
}

/**
 * Set Action for checkdesk_core_actions_set_followers.
 */
function checkdesk_core_actions_set_followers($node) {
  global $user;
  // Check if current user already follow this node.
  $flag = flag_get_flag('follow_story');
  if ($flag && !$flag->is_flagged($node->nid, $user->uid)) {
    $flag->skip_heartbeat_log = TRUE;
    $flag->flag('flag', $node->nid, $user);
    //watchdog('User follow story', t('@user follow this story @title', array('@user' => $user->name, '@title' => $node->title)));
  }
}

function _set_user_avatar_bg($account, $classes = array(), $link = TRUE, $image_style = 'activity_avatar') {
  if (isset($account->picture->uri)) {
    $avatar_uri = $account->picture->uri;
  }
  else {
    $avatar_uri = variable_get('user_picture_default', '') ? variable_get('user_picture_default', '') : '';
  }

  $avatar = '';
  if ($avatar_uri) {
    $derivative_uri = image_style_path($image_style, $avatar_uri);
    $success = file_exists($derivative_uri) || image_style_create_derivative(image_style_load($image_style), $avatar_uri, $derivative_uri);

    $new_image_url = file_create_url($derivative_uri);

    if($link == FALSE) {
      $avatar = theme('html_tag', array(
        'element' => array(
          '#tag' => 'div',
          '#attributes' => array(
            'class' => is_array($classes) ? $classes : array(),
            'title' => $account->name,
            'style' => 'background-image: url("' . $new_image_url . '")'
            ),
          '#value' => '',
        ),
      ));
    } else {
      $avatar = l('', 'user/' . $account->uid, array('html' => TRUE,
      'attributes' => array(
        'class' => is_array($classes) ? $classes : array(),
        'title' => $account->name,
        'style' => 'background-image: url("' . $new_image_url . '")'
      )));
    }

  }
  return $avatar;
}

/**
 * @param array $options
 *   An associative array with the following keys
 *   theme : bool(default TRUE) set TRUE to return active stories as HTML list F
 *           FALSE to return associative array nid => title
 *   extra_nids : array with nids to be added to active stories.
 *   time : the base item for active stories
 *
 * @return string/array
 */
function _checkdesk_active_story($options = array()) {
  $time =  isset($options['time']) ? $options['time'] : strtotime("-". variable_get('checkdesk_active_story_time', '3 day'));
  if (!isset($options['extra_nids'])) {
    $options['extra_nids'] = array(-1);
  }
  if (!isset($options['theme'])) {
    $options['theme'] = TRUE;
  }
  $result = db_query('
    (
      SELECT nid, title
      FROM {node} n
      /*LEFT JOIN {field_data_field_active_story} acs ON acs.entity_id = n.nid*/
      WHERE n.type = :type AND ((n.changed > :time /*AND acs.field_active_story_value != :inactive*/) OR n.nid IN (:extra_nids))
    )
      UNION
    (
      SELECT DISTINCT nid_target, n.title
      FROM {heartbeat_activity} ha
      INNER JOIN {node} n on ha.nid_target = n.nid AND n.type = :type
      /*LEFT JOIN {field_data_field_active_story} acs ON acs.entity_id = n.nid*/
      WHERE message_id IN (:message_id ) AND timestamp > :time /*AND acs.field_active_story_value IS NULL*/
    )
      ORDER BY nid DESC
    ',
    array(
      ':type' => 'discussion',
      ':time' => $time,
      ':inactive' => 0,
      ':message_id' => array('checkdesk_report_suggested_to_story', 'checkdesk_report_published_in_update'),
      ':extra_nids' => $options['extra_nids']
    )
  )->fetchAllKeyed(0);
  if ($options['theme']) {
    $items = array();
    foreach ($result as $k => $v) {
      $items[] = l($v, 'node/'. $k);
    }
    return theme('item_list', array('items' => $items, 'title' => '', 'attributes' => array('class' => 'checkdesk-active-story')));
  }
  return $result;
}

/**
 * Delete update activity when user change story for existing one
 */
function _checkdesk_delete_heartbeat_activity($node) {
  if ($node->type == 'post') {
    $story_nid = isset($node->field_desk[LANGUAGE_NONE][0]['target_id']) ? $node->field_desk[LANGUAGE_NONE][0]['target_id'] : 0;
  }
  else {
    $story_nid = isset($node->field_stories[LANGUAGE_NONE][0]['target_id']) ? $node->field_stories[LANGUAGE_NONE][0]['target_id'] : 0;
  }

  if ($story_nid) {
    $uaids = db_query('
            SELECT uaid FROM {heartbeat_activity} WHERE nid = :nid AND nid_target = :nid_target
          ', array(':nid' => $node->nid, ':nid_target' => $story_nid))->fetchCol();
    if (!empty($uaids)) {
      heartbeat_activity_delete($uaids);
    }
  }
}

/**
 *
 */
function _checkdesk_story_links($nid) {
  global $user;
  $output = '';
  if ($user->uid) {
    $items = array();

    $items[] = array(
      'data' => l(t('Add a report'), 'node/add/media', array('attributes' => array('class' => array('btn', 'btn-primary-alt', 'btn-sm')), 'query' => array('ref_nid' => $nid, drupal_get_destination()))),
      'class' => array('submit-report'),
    );

    if (user_access('create post content')) {
      $items[] = array(
        'data' => l(t('Compose update'), 'node/add/post', array('attributes' => array('class' => array('btn', 'btn-primary-alt', 'btn-sm')), 'query' => array('story' => $nid))),
        'class' => array('compose-update'),
      );
    }

    $output .= theme('item_list', array('items' => $items, 'title' => '', 'attributes' => array('class' => 'story-collaborate-links')));
  }

  return $output;
}

/**
 * List story collaborators
 *  @param story_nid
 *
 */
function _checkdesk_story_get_collaborators($nid, $options = array()) {
  if (!isset($options['extra_users'])) {
    $options['extra_users'] = TRUE;
  }
  if (!isset($options['show_avatars'])) {
    $options['show_avatars'] = TRUE;
  }
  $output = '';
  // TODO check node type
  $users = db_query('
    SELECT ha.uid, u.name, f.fid, f.uri
    FROM {heartbeat_activity} ha
    INNER JOIN {users} u ON ha.uid = u.uid
    LEFT JOIN {file_managed} f ON u.picture = f.fid
    WHERE nid_target = :nid AND message_id != :message_id
    GROUP BY ha.uid
    ORDER BY COUNT(ha.uid) DESC
    ', array(':nid' => $nid, ':message_id' => 'checkdesk_follow_story'))->fetchAll();
  $total_users = count($users);
  if ($total_users) {
    $extra_users = 0;
    $title = format_plural($total_users, '1 collaborator', '@count collaborators');
    if ($options['extra_users']) {
      $num_to_show = variable_get('collaborators_display_count', 3);
      $extra_users = $total_users > $num_to_show ? $total_users - $num_to_show : 0;
    }
    $uitems = $pitems = array();
    if ($extra_users) {
      $users = array_slice($users, 0, $num_to_show);
    }
    foreach ($users as $user) {
      // split user name into first name and last
      $fullname = explode(' ', $user->name);
      $fname = array_shift($fullname);
      $uitems[] = l($fname, 'user/'. $user->uid);
      if ($options['show_avatars']) {
        $avatar = _set_user_avatar_bg(user_load($user->uid));
        if ($avatar) {
          $pitems[] = $avatar;
        }
      }
    }


    $output .= '<div class="story-collaborators-wrapper"><div class="story-collaborators"><span class="sc-users"><h3>' . $title . '</h3>' . implode(', ', $uitems);
    if ($extra_users) {
      $output .= ' <span class="sc-extra-users">+ '. $extra_users .'</span>';
    }
    $output .= '</span>'; // closing sc-users
    if ($options['show_avatars']) {
      $output .= '<span class="sc-avatars">';
      foreach ($pitems as $pitem) {
        $output .= $pitem;
      }
      $output .= '</span>';
    }
    $output .= '</div></div>';
  }

  return $output;
}

/**
 * Retrun 'Reset all filters' link for search/incomming reports views
 */
function _checkdesk_render_reset_search_result_link() {
  if (arg(0) == 'search') {
    return l(t('Reset all filters'), 'search', array('attributes' => array('class' => array('search-reset'))));
  }
  return l(t('Reset all filters'), $_GET['q'], array(
    'attributes' => array(
      'class' => array('search-reset'),
      'onclick' => 'javascript: jQuery("#views-exposed-form-checkdesk-search-incoming-reports").clearForm();jQuery("#edit-submit-checkdesk-search").trigger("click");return false;'
    ),
  ));
}

/**
 * Add header for search page
 * i.e - sort filter + basic filters for each content type.
 */
function _checkdesk_search_header() {
  global $user;
  $links = array();
  $path = '';
  $selected = 'DESC';
  if (isset($_GET['sort_bef_combine'])) {
    $selected = ($_GET['sort_bef_combine'] == 'created ASC') ? 'ASC' : 'DESC';
  }

  $links[] = l(t('Newest'), bef_replace_query_string_arg('sort_bef_combine', 'created DESC', FALSE, FALSE, $path),
    array('attributes' => array('class' => ($selected == 'DESC') ? 'selected' : '')));
  $links[] = l(t('Oldest'), bef_replace_query_string_arg('sort_bef_combine', 'created ASC', FALSE, FALSE, $path),
    array('attributes' => array('class' => ($selected == 'ASC') ? 'selected' : '')));

  if (isset($_GET['type'])) {
    switch ($_GET['type']) {
      case 'report':
        // Add filters for media only
        $selected = 'All';
        if (isset($_GET['field_rating_tid'])) {
          if($_GET['field_rating_tid'] == 1) {
            $selected = 'verified';
          }
          elseif ($_GET['field_rating_tid'] == 2) {
            $selected = 'in-progress';
          }
        }
        $links[] = l(t('Verified'), bef_replace_query_string_arg('field_rating_tid', 1, FALSE, FALSE, $path),
          array('attributes' => array('class' => ($selected == 'verified') ? 'selected' : '')));
        $links[] = l(t('In Progress'), bef_replace_query_string_arg('field_rating_tid', 2, FALSE, FALSE, $path),
          array('attributes' => array('class' => ($selected == 'in-progress') ? 'selected' : '')));

        $selected = 'All';
        if (isset($_GET['media_flags']) && $_GET['media_flags'] == 'flagged_spam') {
          $selected = 'spam';
        }
        $links[] = l(t('Spam'), bef_replace_query_string_arg('media_flags', 'flagged_spam', FALSE, FALSE, $path),
          array('attributes' => array('class' => ($selected == 'spam') ? 'selected' : '')));

        break;
      case 'story':
      case 'update':
      $selected = 'All';
        if (isset($_GET['status'])) {
          $selected = ($_GET['status'] == 1) ? 'published': 'drafts';
        }
        // Check if user can access any drafts content then Show drafts link on search page header
        if (user_access('access any drafts content')) {
            $links[] = l(t('Drafts'), 'search', array(
              'attributes' => array('class' => ($selected == 'drafts') ? array('selected') : array()),
              'query' => array('type' => $_GET['type'], 'state' => 2, 'status' => 'All'),
              ));
        }
        $links[] = l(t('Published'), 'search', array(
            'attributes' => array('class' => ($selected == 'published') ? array('selected') : array()),
            'query' => array('type' => $_GET['type'], 'status' => 1),
            ));
      break;
    }
  }
  return theme('checkdesk_core_render_search_header', array('links' => $links));
}

/**
 * Implements of hook_url_outbound_alter().
 */
function checkdesk_core_url_outbound_alter(&$path, &$options, $original_path) {
  global $user;
  //This is a taxonomy page
  if (preg_match('|^taxonomy/term/([0-9]*)$|', $original_path, $matches)) {
    if (is_numeric($matches[1])) {
      $vocabularies = taxonomy_get_vocabularies();
      $term = taxonomy_term_load($matches[1]);
      $term_vocabulary = $vocabularies[$term->vid];
      if ($term_vocabulary->machine_name == 'tags') {
        $path = 'search';
        $options['query']['field_tags_tid'] = $matches[1];
      }
      elseif ($term_vocabulary->machine_name == 'sections') {
        $path = 'section/' . $term->name;
      }
    }
  }
  else if ($path === 'reports') {
    $path = 'checkdesk/reports';
  }
  else if ($path === 'stories') {
    $path = 'checkdesk/stories';
  }
}

/**
 * Implements hook_file_url_alter().
 *
 * Make all URLs be protocol relative.
 * Note: protocol relatice URLs will cause IE7/8 to download stylesheets twice.
 * @see https://gist.github.com/mattfarina/1524135
 * @see http://www.stevesouders.com/blog/2010/02/10/5a-missing-schema-double-download/
 */
function checkdesk_core_file_url_alter(&$url) {

  global $base_url;

  static $relative_base_url = NULL, $relative_base_length = NULL;

  $scheme = file_uri_scheme($url);

  // For some things (e.g., images) hook_file_url_alter can be called multiple
  // times. So, we have to be sure not to alter it multiple times. If we already
  // are relative protocol we can just return.
  // Only setup the and parse this stuff once.
  if (!$relative_base_url || !$relative_base_length) {
    $relative_base_url = '//' . file_uri_target($base_url);
    $relative_base_length = strlen($relative_base_url);
  }
  if (!$scheme && substr($url, 0, $relative_base_length) == $relative_base_url) {
    return;
  }

  // Handle the case where we have public files with the scheme public:// or
  // the case the relative path doesn't start with a /. Internal relative urls
  // have the base url prepended to them.
  if (!$scheme || $scheme == 'public') {

    // Internal Drupal paths.
    if (!$scheme) {
      $path = $url;
    }
    else {
      $wrapper = file_stream_wrapper_get_instance_by_scheme($scheme);
      $path = $wrapper->getDirectoryPath() . '/' . file_uri_target($url);
    }

    // Clean up Windows paths.
    $path = str_replace('\\', '/', $path);

    $url = $base_url . '/' . $path;
  }

  // Convert full URLs to relative protocol.
  $protocols = array('http', 'https');
  $scheme = file_uri_scheme($url);
  if ($scheme && in_array($scheme, $protocols)) {
    $url = '//' . file_uri_target($url);
  }
}

/**
 * Implementation of hook_language_switch_links_alter().
 */
function checkdesk_core_language_switch_links_alter(&$links, $type, $path) {
  $params = drupal_get_query_parameters();
  foreach ($links as &$link) {
    $link['query'] = $params;
  }
}


/**
 * Helper function to Normalize URL
 * @param $url
 * @return mixed
 */
function _checkdesk_normalize_url($url) {
  require_once(libraries_get_path('url-normalizer') . '/src/URL/Normalizer.php');
  // $url = _checkdesk_unshorten_url($url);
  // trim URL.
  $url = trim($url);
  $un = new URL\Normalizer($url);
  return $un->normalize();
}

/**
 * Helper function for unshortener url
 * http://jonathonhill.net/2012-05-18/unshorten-urls-with-php-and-curl/
 * @param $url
 * @return mixed
 */
function _checkdesk_unshorten_url($url) {
  $ch = curl_init($url);
  curl_setopt_array($ch, array(
    CURLOPT_FOLLOWLOCATION => TRUE,  // the magic sauce
    CURLOPT_RETURNTRANSFER => TRUE,
    CURLOPT_SSL_VERIFYHOST => FALSE, // suppress certain SSL errors
    CURLOPT_SSL_VERIFYPEER => FALSE,
  ));
  curl_exec($ch);
  $url = curl_getinfo($ch, CURLINFO_EFFECTIVE_URL);
  curl_close($ch);
  return $url;
}

/**
 * @return string
 */
function _checkdesk_main_navigation() {
  $items = array();
  $a_class = 'main-navigation-link'; //global class for a
  $li_class = 'main-navigation-item'; //global class for item
  $svg_file = base_path() . drupal_get_path('theme', 'checkdesk') . '/assets/imgs/icons/icons.svg';
  $s_search = array_fill_keys(array('All', 'report', 'update', 'story', 'source'), '');
  if (arg(0) == 'search') {
    if (isset($_GET['type'])) {
        if (count($_GET) == 2) {
            $s_search[$_GET['type']] = 'search-nav-selected';
        }
        else {
            $s_search['All'] = 'search-nav-selected';
        }
    }
    // Add js to remove other active classes
    drupal_add_js('
      jQuery(function() {
        jQuery("nav a.active:not(a.search-nav-selected)").removeClass("active");
        jQuery("div#search ul.control-page-items li a").removeClass("active")
      });
      ', 'inline');
  }
  //Build first group links
  //homepage, add a report, write a story and search
  $logo_icon = '<svg class="logo-icon" preserveAspectRatio="xMinYMin meet" viewBox="0 0 27 39"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' . $svg_file . '#logo-icon"></use></svg>';
  $items[] = array(
    'data' => l($logo_icon . '<span>' . t('Front page') . '</span>', '<front>', array(
      'attributes' => array('class' => array($a_class, 'homepage-link')),
      'html' => TRUE,
    )),
    'class' => array($li_class, 'homepage'),
  );
  $ref_nid = 0;
  if (($node = menu_get_object()) && $node->type == 'discussion') {
    $ref_nid = arg(1);
  }
  // Create links for anonymous users
  $create_query = array();
  $create_query['ref_nid'] = $ref_nid;
  global $user;
  if (!$user->uid) {
    $create_ano_link = 'checkdesk/nojs/sign_in_up';
    $create_ano_class = array('ctools-use-modal', 'ctools-modal-modal-popup-medium');
  }
  // Create report link
  $create_report_icon = '<svg class="create-report-icon" preserveAspectRatio="xMinYMin meet" viewBox="29 0 26 34"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' . $svg_file . '#create-report-icon"></use></svg>';
  $create_link = 'node/add/media';
  $create_classes = array($a_class, 'create-report-link');
  if (!user_access('create media content')) {
    $create_query['destination'] = $create_link;
    $create_link = $create_ano_link;
    $create_classes = array_merge($create_classes, $create_ano_class);
  }
  $items[] = array(
    'data' => l($create_report_icon . '<span>' . t('Create report') . '</span>', $create_link, array(
      'attributes' => array('class' => $create_classes),
      'html' => TRUE,
      'query' => $create_query,
    )),
    'class' => array($li_class, 'create-report'),
  );

  // Create source link
  $create_source_icon = '<svg class="create-source-icon" preserveAspectRatio="xMinYMin meet" viewBox="56 0 26 34"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' . $svg_file . '#create-source-icon"></use></svg>';
  $create_link = 'node/add/source';
  $create_classes = array($a_class, 'create-source-link');
  if (!user_access('create source content')) {
    $create_query['destination'] = $create_link;
    $create_link = $create_ano_link;
    $create_classes = array_merge($create_classes, $create_ano_class);
  }
  $items[] = array(
    'data' => l($create_source_icon . '<span>' . t('Create source') . '</span>', $create_link, array(
      'attributes' => array('class' => $create_classes),
      'html' => TRUE,
      'query' => $create_query,
    )),
    'class' => array($li_class, 'create-source'),
  );

  // Create story
  $create_story_icon = '<svg class="create-story-icon" preserveAspectRatio="xMinYMin meet" viewBox="57 0 32 28"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' . $svg_file . '#create-story-icon"></use></svg>';
  $create_link = 'node/add/discussion';
  $create_classes = array($a_class, 'create-story-link');
  if (!user_access('create discussion content')) {
    $create_query['destination'] = $create_link;
    $create_link = $create_ano_link;
    $create_classes = array_merge($create_classes, $create_ano_class);
  }
  $items[] = array(
    'data' => l($create_story_icon . '<span>' . t('Create story') . '</span>', $create_link, array(
      'attributes' => array('class' => $create_classes),
      'html' => TRUE,
      'query' => $create_query,
    )),
    'class' => array($li_class, 'create-story'),
  );

  $search_icon = '<svg class="search-icon" preserveAspectRatio="xMinYMin meet" viewBox="91 0 24 24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' . $svg_file . '#search-icon"></use></svg>';
  $items[] = array(
    'data' => l($search_icon . '<span>' . t('Search') . '</span>', 'search', array(
      'attributes' => array('class' => array($a_class, 'checkdesk-search-link', $s_search['All'])),
      'html' => TRUE,
    )),
    'class' => array($li_class, 'checkdesk-search'),
  );

  $first_group = theme('item_list', array(
    'items' => $items,
    'title' => '',
    'type' => 'ul',
    'attributes' => array('class' => 'first-group'),
  ));
  // Second group
  // reports, stories and updates
  $items = array();
  $stories_icon = '<svg class="stories-icon" preserveAspectRatio="xMinYMin meet" viewBox="145 0 32 26"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' . $svg_file . '#stories-icon"></use></svg>';
  $items[] = array(
    'data' => l($stories_icon . '<span>' . t('Stories') . '</span>', 'search', array(
      'attributes' => array('class' => array($a_class, 'stories-link', $s_search['story'])),
      'html' => TRUE,
      'query' => array('type' => 'story'),
    )),
    'class' => array($li_class, 'stories'),
  );
  $reports_icon = '<svg class="reports-icon" preserveAspectRatio="xMinYMin meet" viewBox="168 0 32 26"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' . $svg_file . '#reports-icon"></use></svg>';
  $items[] = array(
    'data' => l($reports_icon . '<span>' . t('Reports') . '</span>', 'search', array(
      'attributes' => array('class' => array($a_class, 'reports-link', $s_search['report'])),
      'html' => TRUE,
      'query' => array('type' => 'report'),
    )),
    'class' => array($li_class, 'reports'),
  );
  $sources_icon = '<svg class="sources-icon" preserveAspectRatio="xMinYMin meet" viewBox="202 0 32 26"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' . $svg_file . '#sources-icon"></use></svg>';
  $items[] = array(
    'data' => l($sources_icon . '<span>' . t('Sources') . '</span>', 'search', array(
      'attributes' => array('class' => array($a_class, 'sourcess-link', $s_search['source'])),
      'html' => TRUE,
      'query' => array('type' => 'source'),
    )),
    'class' => array($li_class, 'sources'),
  );
  // add sections icon if there are sections defined by the partner
  if (_checkdesk_show_sections_link()) {
     $active_sections = '';
    if (arg(0) == 'section' && arg(1) !== NULL) {
        $active_sections = count(taxonomy_get_term_by_name(arg(1), 'sections')) ? 'active' : '';
    }
    $sections_icon = '<svg class="sections-icon" preserveAspectRatio="xMinYMin meet" viewBox="176 0 28 24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' . $svg_file . '#sections-icon"></use></svg>';
    $items[] = array(
        'data' => l($sections_icon . '<span>' . t('Sections') . '</span>', 'sections', array(
        'attributes' => array('class' => array($a_class, 'sections-link', $active_sections)),
        'html' => TRUE,
        )),
        'class' => array($li_class, 'section'),
    );
  }
  $second_group = theme('item_list', array(
    'items' => $items,
    'title' => '',
    'type' => 'ul',
    'attributes' => array('class' => 'second-group')
  ));

  // Third group
  // support link, manage users and about checkdesk
  $items = array();
  $support_icon = '<svg class="support-icon" preserveAspectRatio="xMinYMin meet" viewBox="206 0 20 31"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' . $svg_file . '#support-icon"></use></svg>';
    $items[] = array(
      'data' => l($support_icon . '<span>' . t('Support') . '</span>', 'https://groups.google.com/forum/#!forum/checkdesk', array(
        'attributes' => array('class' => array($a_class, 'support-link')),
        'html' => TRUE,
      )),
      'class' => array($li_class, 'support'),
    );
  $about_icon = '<svg class="about-icon" preserveAspectRatio="xMinYMin meet" viewBox="258 0 28 28"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="' . $svg_file . '#about-icon"></use></svg>';
  $items[] = array(
    'data' => l($about_icon . '<span>' . t('About Checkdesk') . '</span>', 'content/about-checkdesk', array(
      'attributes' => array('class' => array($a_class, 'about-checkdesk-link')),
      'html' => TRUE,
    )),
    'class' => array($li_class, 'about-checkdesk'),
  );

  $third_group = theme('item_list', array(
    'items' => $items,
    'title' => '',
    'type' => 'ul',
    'attributes' => array('class' => 'third-group')
  ));

  return theme('checkdesk_core_main_navigation', array(
    'first_group' => $first_group,
    'second_group' => $second_group,
    'third_group' => $third_group,
  ));
}

/**
 * Check if partner defined sections or not
 */
function _checkdesk_show_sections_link() {
  $vocabulary = taxonomy_vocabulary_machine_name_load('sections');
  $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
  $show_sections = count($terms) ? TRUE : FALSE;
  return $show_sections;
}

/**
 * List most popular stories.
 */
function _checkdesk_most_popular_stories($data = FALSE) {
  $nid = arg(0) == 'node' ? arg(1) : 0;
  $activities = array(
      'checkdesk_comment_on_report',
      'status_report',
      'checkdesk_fact_checking_on',
      'checkdesk_fact_checking_on_by_citizen',
      'checkdesk_follow_story',
      'checkdesk_new_update_on_story_i_commented_on_update',
      'checkdesk_report_suggested_to_story',
      'checkdesk_flag_report',
  );
  $query = db_select('heartbeat_activity', 'ha');
  $query->fields('n', array('title', 'nid'));
  $query->fields('fm', array('uri'));
  $query->innerjoin('node', 'n', 'ha.nid_target = n.nid AND n.type = :type', array(':type' => 'discussion'));
  $query->leftjoin('field_data_field_lead_image', 'fi', 'n.nid = fi.entity_id');
  $query->leftjoin('file_managed', 'fm', 'fi.field_lead_image_fid = fm.fid');
  $query->condition('n.status', 1);
  $query->condition('n.nid', $nid, '<>');
  $query->condition('ha.timestamp', strtotime("-1 week"), '>=');
  $query->condition('ha.message_id', $activities, 'IN');
  $query->groupBy('n.nid');
  $query->orderBy('COUNT( n.nid )', 'DESC');
  $query->range(0, 5);
  if ($data) {
    return $query->execute()->fetchCol(1);
  }
  $result = $query->execute()->fetchAll();
  return $result ? theme('checkdesk_core_most_popular_stories', array('stories' => $result)) : NULL;
}

/**
 * Implements hook_field_group_info_alter();
 * to prevent metadata fields revert
 */
function checkdesk_core_field_group_info_alter(&$groups) {
  if (!empty($groups['group_metadata|node|media|form'])) {
    $groups['group_metadata|node|media|form']->data['children'] = variable_get('checkdesk_metadata_fields', array());
  }
}

function _checkdesk_core_export_data_csv() {
  $team = variable_get('site_name');
  $slug = str_replace(' ', '_', strtolower($team));
  $csv_folder = 'public://checkdesk_migration/'. $slug .'/';
  file_prepare_directory($csv_folder, FILE_CREATE_DIRECTORY);
  $team_id = hash('md5', $team);

  // export team
  $file_index = 1;
  $file_name = _get_file_name($csv_folder, 'teams', $file_index);
  $result = array(
    array($team_id, $team, $slug, file_create_url(theme_get_setting('frontpage_logo_path', 'checkdesk')))
  );
  $header = array('id', 'name', 'slug', 'logo');
  _checkdesk_core_write_to_csv($file_name, $header, $result);
  // export users
  $file_index++;
  $file_name = _get_file_name($csv_folder, 'users', $file_index);
  $result = db_query("SELECT u.name, u.mail, u.pass, IFNULL(f.uri, 'http://meedan.com'), FROM_UNIXTIME(u.created), FROM_UNIXTIME(u.login)
                    FROM {users} u
                    LEFT JOIN {file_managed} f ON f.fid = u.picture
                    WHERE u.uid <> 0
                    ");
  $header = array('name', 'email', 'password', 'profile_image', 'created_at', 'login');
  _checkdesk_core_write_to_csv($file_name, $header, $result);
  // Export team_users
  $file_index++;
  $file_name = _get_file_name($csv_folder, 'team_users', $file_index);
  $roles = array_flip(user_roles(TRUE));
  $administrator_role_id = $roles['administrator'];
  $journalist_role_id = $roles['journalist'];
  $result = db_query("SELECT '$team_id' AS team_id, u.mail AS user_id, 'owner' AS role, IF(status=1, 'member', 'banned') AS status,
                      FROM_UNIXTIME(u.created) AS created_at, FROM_UNIXTIME(u.created) AS updated_at
                      FROM {users} u
                      INNER JOIN {users_roles} ur ON u.uid = ur.uid
                      WHERE ur.rid = $administrator_role_id
                      UNION
                      SELECT '$team_id' AS team_id, u.mail AS user_id, IF(MAX(ur.rid)=$journalist_role_id, 'journalist', 'contributor') AS role,
                             IF(status=1, 'member', 'banned') AS status, FROM_UNIXTIME(u.created) AS created_at, FROM_UNIXTIME(u.created) AS updated_at
                      FROM {users} u
                      INNER JOIN {users_roles} ur ON u.uid = ur.uid
                      WHERE ur.rid <> $administrator_role_id
                      GROUP BY u.uid
                    ");
  $header = array('team_id', 'user_id', 'role', 'status', 'created_at', 'updated_at');
  _checkdesk_core_write_to_csv($file_name, $header, $result);
  /*
  // export sources
  $file_index++;
  $file_name = _get_file_name($csv_folder, 'sources', $file_index);
  $result = db_query('SELECT u.name AS user_id, u.name, fb.field_bio_value, f.uri
                    FROM {users} u
                    LEFT JOIN {file_managed} f ON f.fid = u.picture
                    LEFT JOIN {field_data_field_bio} fb ON u.uid = fb.entity_id
                    WHERE u.uid <> :uid
                    ', array(':uid' => 0));
  $header = array('user_id', 'name', 'slogan', 'avatar');
  _checkdesk_core_write_to_csv($file_name, $header, $result);
  // export accounts
  $file_index++;
  $file_name = _get_file_name($csv_folder, 'accounts', $file_index);
  $result = db_query('SELECT FROM_UNIXTIME(n.created), FROM_UNIXTIME(n.changed), field_source_url_url, u.name
                    FROM {node} n
                    INNER JOIN {users} u ON u.uid = n.uid
                    INNER JOIN {field_data_field_source_url} fs ON n.nid = fs.entity_id
                    WHERE n.type = :type
                    ', array(':type' => 'source'));
  $header = array('created_at', 'updated_at', 'url', 'user_id');
  _checkdesk_core_write_to_csv($file_name, $header, $result);
  */
  // export projects
  $file_index++;
  $file_name = _get_file_name($csv_folder, 'projects', $file_index);
  $result = db_query('SELECT n.nid, n.title, :team_id AS team_id, u.mail, fb.body_value, f.uri,
                            FROM_UNIXTIME(n.created), FROM_UNIXTIME(n.changed)
                    FROM {node} n
                    INNER JOIN {users} u ON u.uid = n.uid
                    LEFT JOIN {field_revision_body} fb ON n.nid = fb.entity_id
                    LEFT JOIN {field_data_field_lead_image} fi ON n.nid = fi.entity_id
                    LEFT JOIN {file_managed} f ON f.fid = fi.field_lead_image_fid
                    WHERE n.type = :type
                    ', array(':team_id' => $team_id, ':type' => 'discussion'));
  $header = array('id', 'title', 'team_id', 'user_id', 'description', 'lead_image', 'created_at', 'updated_at');
  _checkdesk_core_write_to_csv($file_name, $header, $result);
  // export medias
  $file_index++;
  $file_name = _get_file_name($csv_folder, 'project_medias', $file_index);
  $result = db_query('SELECT n.nid, fp.field_stories_target_id, fl.field_link_url, u.mail, FROM_UNIXTIME(n.created), FROM_UNIXTIME(n.changed)
                    FROM {node} n
                    INNER JOIN {users} u ON u.uid = n.uid
                    INNER JOIN {field_data_field_link} fl ON n.nid = fl.entity_id
                    INNER JOIN {field_data_field_stories} fp ON n.nid = fp.entity_id
                    WHERE n.type = :type
                    ', array(':type' => 'media'));
  $header = array('id', 'project_id', 'url', 'user_id', 'created_at', 'updated_at');
  _checkdesk_core_write_to_csv($file_name, $header, $result);
  // Export annotations
  _checkdesk_core_export_annotations($csv_folder, $file_index);
}

function _get_file_name($csv_folder, $name, $index) {
  $index = sprintf("%02d", $index);
  return $csv_folder . $index . '_' . $name . '.csv';
}

function _checkdesk_core_write_to_csv($file_name, $header, $data) {
  $fp = fopen($file_name, 'w');
  fputcsv($fp, $header, ',', '`');
  foreach ($data as $row) {
    $w_row = (array) $row;
    if (isset($w_row['uri'])) {
      $w_row['uri'] = file_create_url($w_row['uri']);
    }
    fputcsv($fp, $w_row, ',', '`');
  }
  fclose($fp);
}

function _checkdesk_core_export_annotations($csv_folder, $file_index) {
  // Export tags
  $file_index++;
  $file_name = _get_file_name($csv_folder, 'tags', $file_index);
  $result = db_query('
              SELECT u.mail as annotator_id, :annotator as annotator_type, n.nid as annotated_id, :annotated as annotated_type,
                     td.name as tag, FROM_UNIXTIME(n.created) as created_at, FROM_UNIXTIME(n.changed) as updated_at
              FROM {node} n
              INNER JOIN {users} u ON u.uid = n.uid
              INNER JOIN {field_data_field_tags} ft ON ft.revision_id = n.vid
              INNER JOIN {taxonomy_term_data} td ON td.tid = ft.field_tags_tid
              WHERE n.type = :type
              ', array(':annotator' => 'User', ':annotated' => 'ProjectMedia', ':type' => 'media'));
  $header = array('annotator_id', 'annotator_type', 'annotated_id', 'annotated_type', 'tag', 'created_at', 'updated_at');
  _checkdesk_core_write_to_csv($file_name, $header, $result);
  // Export comments
  $file_index++;
  $file_name = _get_file_name($csv_folder, 'comments', $file_index);
  $result = db_query('SELECT u.mail as annotator_id, :annotator as annotator_type, n.nid as annotated_id, :annotated as annotated_type,
                      c.subject AS text, FROM_UNIXTIME(n.created) as created_at, FROM_UNIXTIME(n.changed) as updated_at
                      FROM {node} n
                      INNER JOIN {users} u on n.uid = u.uid
                      INNER JOIN {comment} c ON n.nid = c.nid
                      WHERE n.type = :type
                      ', array(':annotator' => 'User', ':annotated' => 'ProjectMedia', ':type' => 'media'));
  $header = array('annotator_id', 'annotator_type', 'annotated_id', 'annotated_type', 'text', 'created_at', 'updated_at');
  _checkdesk_core_write_to_csv($file_name, $header, $result);
  // Export status
  /*
  $result = db_query('SELECT :status AS type ,td.name AS status, IFNULL(fr.bundle, fs.bundle) AS target_entity, IFNULL(fr.entity_id, fs.entity_id) as target
            FROM {taxonomy_vocabulary} v
            INNER JOIN {taxonomy_term_data} td ON v.vid = td.vid
            LEFT JOIN {field_data_field_rating} fr on td.tid = fr.field_rating_tid
            LEFT JOIN {field_data_field_source_status} fs ON td.tid = fs.field_source_status_tid
            WHERE v.machine_name IN (:machine_name) AND (fs.bundle = :source OR fr.bundle = :media)
            ', array(':status' => 'status', ':machine_name' => array('media_rating', 'source_status'), ':source' => 'source', ':media' => 'media'));
  $header = array('type', 'body', 'target');
  $data = array();
  foreach ($result as $row) {
    $row->body = drupal_json_encode(array('type' => $row->type, 'status' => $row->status));
    unset($row->status, $row->target_entity);
    $data[] = $row;
  }
  _checkdesk_core_write_to_csv($file_name, $header, $data);
  */
}
